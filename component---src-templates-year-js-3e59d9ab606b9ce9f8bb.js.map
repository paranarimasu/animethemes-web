{"version":3,"sources":["webpack:///./src/components/card/index.js","webpack:///./src/components/text/index.js","webpack:///./src/components/switcher/index.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/templates/year.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/hooks/useImage.js","webpack:///./src/components/navigation/season.js","webpack:///./src/components/navigation/year.js"],"names":["StyledCard","styled","div","props","theme","colors","secondaryTitle","primaryBackground","elevation","hoverable","css","Card","children","StyledText","StyledTextBase","small","Text","StyledSwitcher","Flex","attrs","flexInline","gapsRow","elevatedPrimaryBackground","Switcher","StyledSearchResultCard","StyledCover","img","StyledBody","gapsColumn","StyledChildren","SearchResultCard","title","description","image","to","alt","src","bold","maxLines","link","SearchResultDescription","filter","child","map","index","length","color","primaryMediumEmphasis","seasonOrder","StyledPage","YearDetailPage","allAnime","data","pageContext","year","seasonList","pageTitle","animeBySeason","groupedBySeason","sort","a","b","indexOf","fieldValue","season","animeList","nodes","SeasonPreview","variant","anime","slug","justifyContent","toLowerCase","icon","faChevronDown","fixedWidth","query","AnimeSearchResultCard","hideThemes","smallCover","useImage","animeLink","premiere","premiereLink","themes","name","flexWrap","gapsBoth","slice","entries","videos","entry","video","videoSlug","createVideoSlug","block","faEllipsisH","StyledButtonPlay","Button","StyledPrefix","secondaryBackground","ButtonPlay","playing","faCircleNotch","faPlay","spin","resourceWithImages","images","facet","largeCover","SeasonNavigation","availableSeason","active","StyledYear","StyledYearPrevious","StyledYearNext","YearNavigation","yearList","useStaticQuery","groupedByYear","group","previousYear","nextYear","alignItems","silent"],"mappings":"oLAGMA,EAAaC,IAAOC,IAAV,uEAAGD,CAAH,4GAEa,SAACE,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,kBAGnC,SAACH,GAAD,OAAWA,EAAMC,MAAMC,OAAOE,kBAAkBJ,EAAMC,MAAMI,cAE9E,SAACL,GAAD,OAAWA,EAAMM,WAAaC,YAAnB,mDAIe,SAACP,GAAD,OAAWA,EAAMC,MAAMC,OAAOE,kBAAkBJ,EAAMC,MAAMI,UAAY,SAKzF,SAASG,EAAT,GAAuC,IAAvBC,EAAsB,EAAtBA,SAAaT,EAAS,4BACjD,OACI,cAACH,EAAD,iBAAgBG,EAAhB,UACKS,O,sICjBPC,EAAaZ,YAAOa,KAAV,mEAAGb,CAAH,SACV,SAACE,GAAD,OAAWA,EAAMY,OAASL,YAAf,2CAMF,SAASM,EAAT,GAAuC,IAAvBJ,EAAsB,EAAtBA,SAAaT,EAAS,4BACjD,OACI,cAACU,EAAD,iBAAgBV,EAAhB,UACKS,O,kJCVPK,EAAiBhB,YAAOiB,KAAMC,MAAM,CACtCC,YAAY,EACZC,QAAS,WAFO,8EAAGpB,CAAH,6CAIIqB,KAKT,SAASC,EAAT,GAA2C,IAAvBX,EAAsB,EAAtBA,SAAaT,EAAS,4BACrD,OACI,cAACc,EAAD,iBAAoBd,EAApB,UACKS,O,sNCTPY,EAAyBvB,YAAOU,KAAV,uFAAGV,CAAH,4EAOtBwB,EAAcxB,IAAOyB,IAAV,4EAAGzB,CAAH,8CAKX0B,EAAa1B,IAAOC,IAAV,2EAAGD,CAAH,2FAOV2B,YAAW,YAIXC,EAAiB5B,IAAOC,IAAV,+EAAGD,CAAH,6CAML,SAAS6B,EAAT,GAAkF,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,GAAItB,EAAsB,EAAtBA,SAAaT,EAAS,+DAC5F,OACI,eAACqB,EAAD,iBAA4BrB,EAA5B,WACI,cAAC,OAAD,CAAM+B,GAAIA,EAAV,SACI,cAACT,EAAD,CAAaU,IAAI,QAAQC,IAAKH,MAElC,eAACN,EAAD,WACI,cAAC,IAAD,CAAMU,MAAI,EAACC,SAAU,EAArB,SACsB,iBAAVP,EACJ,cAAC,OAAD,CAAMG,GAAIA,EAAV,SACI,cAAC,IAAD,CAAMK,MAAI,EAAV,SAAYR,MAEhBA,IAER,cAAC,IAAD,CAAMhB,OAAK,EAACuB,SAAU,EAAtB,SAA0BN,OAE9B,cAACH,EAAD,UACKjB,QAMV,SAAS4B,EAAT,GACH,OADkD,EAAZ5B,SACtB6B,QAAO,SAACC,GAAD,QAAaA,KAAOC,KAAI,SAACD,EAAOE,EAAR,OAAiBC,EAAjB,EAAiBA,OAAjB,OAC3C,eAAC,IAAD,CAAkBC,MAAO1C,IAAMC,OAAO0C,sBAAtC,UACI,+BAAOL,IACNE,EAAQC,EAAS,GACd,sBAAMC,MAAO1C,IAAMC,OAAO0C,sBAA1B,mBAHGH,Q,uRChDbI,EAAc,CAAE,SAAU,SAAU,SAAU,QAC9CC,EAAahD,IAAOC,IAAV,mEAAGD,CAAH,QACV2B,eAGS,SAASsB,EAAT,GAAoF,IAAlDC,EAAiD,EAAzDC,KAAQD,SAAiD,IAArCE,YAAeC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WACxEC,EAAeF,EAAN,SACTG,EAAgBN,EAASO,gBAAgBC,MAAK,SAACC,EAAGC,GAAJ,OAAUb,EAAYc,QAAQF,EAAEG,YAAcf,EAAYc,QAAQD,EAAEE,eAExH,OACI,eAACd,EAAD,WACI,cAAC,IAAD,CAAKlB,MAAOyB,IACZ,cAAC,IAAD,CAAgBF,KAAMA,IACtB,cAAC,IAAD,CAAkBA,KAAMA,EAAMC,WAAYA,IACzCE,EAAcd,KAAI,gBAAeqB,EAAf,EAAGD,WAA2BE,EAA9B,EAAuBC,MAAvB,OACf,cAACC,EAAD,CAA4BH,OAAQA,EAAQV,KAAMA,EAAMW,UAAWA,GAA/CD,SAMpC,SAASG,EAAT,GAAqD,IAA5BH,EAA2B,EAA3BA,OAAQV,EAAmB,EAAnBA,KAAMW,EAAa,EAAbA,UACnC,OACI,qCACI,cAAC,IAAD,CAAOG,QAAQ,UAAf,SAA0BJ,IACzBC,EAAUtB,KAAI,SAAC0B,GAAD,OACX,cAAC,IAAD,CAAwCA,MAAOA,GAAnBA,EAAMC,SAEtC,cAAC,IAAD,CAAMC,eAAe,SAArB,SACI,cAAC,IAAD,CAAQrC,GAAE,SAAWoB,EAAX,IAAmBU,EAAOQ,cAAiBC,MAAI,EAAzD,SACI,cAAC,IAAD,CAAiBA,KAAMC,IAAeC,YAAU,WAO7D,IAAMC,EAAK,c,wNCvCH,SAASC,EAAT,GAA+D,IAA9BR,EAA6B,EAA7BA,MAA6B,IAAtBS,kBAAsB,SACjEC,EAAeC,YAASX,GAAxBU,WAEFE,EAAS,UAAaZ,EAAMC,KAE9BY,EAAWb,EAAMf,KACjB6B,EAAY,SAAYd,EAAMf,KAC9Be,EAAML,SACNkB,EAAWb,EAAML,OAAS,IAAMkB,EAChCC,GAAY,IAAQd,EAAML,OAAOQ,eAGrC,IAAIxC,EACA,eAAC,IAAD,WACI,2CACGkD,GACC,cAAC,OAAD,CAAMhD,GAAIiD,EAAV,SACI,cAAC,IAAD,CAAM5C,MAAI,EAAV,SAAY2C,MAGpB,iCAAOb,EAAMe,OAAOvC,OAApB,gBAIR,OACI,cAAC,IAAD,CACId,MAAOsC,EAAMgB,KACbrD,YAAaA,EACbC,MAAO8C,EACP7C,GAAI+C,EAJR,UAMMH,GACE,cAAC,IAAD,UACI,eAAC,IAAD,CAAMQ,SAAS,OAAOC,SAAS,UAA/B,UACKlB,EAAMe,OACFI,MAAM,EAAG,GACT/C,QAAO,SAACrC,GAAD,OAAWA,EAAMqF,QAAQ5C,QAAUzC,EAAMqF,QAAQ,GAAGC,OAAO7C,UAClEF,KAAI,SAACvC,GACF,IAAMuF,EAAQvF,EAAMqF,QAAQ,GACtBG,EAAQD,EAAMD,OAAO,GACrBG,EAAYC,YAAgB1F,EAAOuF,EAAOC,GAEhD,OACI,cAAC,IAAD,CAA6B1D,GAAE,UAAYmC,EAAMC,KAAlB,IAA0BuB,EAAzD,SACI,cAAC,IAAD,CAAM9E,OAAK,EAACgF,OAAK,EAAjB,SAAmB3F,EAAMkE,QADZlE,EAAMkE,SAMlCD,EAAMe,OAAOvC,OAAS,GACnB,cAAC,IAAD,CAAQ4B,MAAI,EAAC1C,MAAM,kBAAkBG,GAAI+C,EAAzC,SACI,cAAC,IAAD,CAAiBR,KAAMuB,IAAarB,YAAU,e,4JCzDxEsB,EAAmBhG,YAAOiG,KAAV,6EAAGjG,CAAH,+FAQhBkG,EAAelG,IAAOC,IAAV,yEAAGD,CAAH,+JAUM,SAACE,GAAD,OAAWA,EAAMC,MAAMC,OAAO+F,uBACzC,SAACjG,GAAD,OAAWA,EAAMC,MAAMC,OAAOE,kBAAkB,MAEvDoB,EAAa1B,IAAOC,IAAV,uEAAGD,CAAH,qBAID,SAASoG,EAAT,GAAsD,IAAhCzF,EAA+B,EAA/BA,SAAU0F,EAAqB,EAArBA,QAAYnG,EAAS,sCAChE,OACI,eAAC8F,EAAD,iBAAsB9F,EAAtB,WACI,cAACgG,EAAD,UACI,cAAC,IAAD,CAAiB1B,KAAM6B,EAAUC,IAAgBC,IAAQC,KAAMH,EAAS3B,YAAU,MAEtF,cAAChD,EAAD,UACKf,U,o2BCtCF,SAASoE,EAAS0B,GAC7B,IAAMC,EAAS,GAEf,GAAID,EACA,cAAoBA,EAAmBC,UAAvC,aAA+C,CAAC,IAArC1E,EAAoC,QAC3C,OAAQA,EAAM2E,OACV,IAAK,cACDD,EAAO5B,WAAa9C,EAAMM,KAC1B,MACJ,IAAK,cACDoE,EAAOE,WAAa5E,EAAMM,MAQ1C,OAAOoE,E,qKCbI,SAASG,EAAT,GAAyD,IAA7BxD,EAA4B,EAA5BA,KAAMU,EAAsB,EAAtBA,OAAQT,EAAc,EAAdA,WACrD,OACI,cAAC,IAAD,CAAMgB,eAAe,SAArB,SACI,cAAC,IAAD,UACKhB,EAAWZ,KAAI,SAACoE,GAAD,OACZ,cAAC,IAAD,CAA8B7E,GAAE,SAAWoB,EAAX,IAAmByD,EAAgBvC,cAAiBwC,OAAQD,IAAoB/C,EAAhH,SAAyH+C,GAA5GA,Y,gJCJ3BE,EAAahH,IAAOC,IAAV,uEAAGD,CAAH,wCAOViH,EAAqBjH,YAAOgH,GAAV,+EAAGhH,CAAH,+BAGlBkH,EAAiBlH,YAAOgH,GAAV,2EAAGhH,CAAH,iCAIL,SAASmH,EAAT,GAAmC,IAAT9D,EAAQ,EAARA,KAC/B+D,EAAWC,yBAAe,cAQ7BnE,SAASoE,cAAc5E,KAAI,SAAC6E,GAAD,OAAYA,EAAMlE,QAE1CmE,EAAeJ,EAASvD,QAAQR,GAAQ,EAAI+D,EAASA,EAASvD,QAAQR,GAAQ,GAAK,KACnFoE,EAAWL,EAASvD,QAAQR,GAAQ+D,EAASxE,OAAS,EAAIwE,EAASA,EAASvD,QAAQR,GAAQ,GAAK,KAEvG,OACI,eAAC,IAAD,CAAMqE,WAAW,SAAjB,UACI,cAACT,EAAD,UACKO,GACG,cAAC,OAAD,CAAMvF,GAAE,SAAWuF,EAAnB,SACI,cAAC,IAAD,CAAQG,QAAM,EAAd,SAAgBH,QAI5B,cAAC,IAAD,CAAQvF,GAAG,QAAQ0F,QAAM,EAAzB,SACI,cAAC,IAAD,UAAQtE,MAEZ,cAAC6D,EAAD,UACKO,GACG,cAAC,OAAD,CAAMxF,GAAE,SAAWwF,EAAnB,SACI,cAAC,IAAD,CAAQE,QAAM,EAAd,SAAgBF","file":"component---src-templates-year-js-3e59d9ab606b9ce9f8bb.js","sourcesContent":["import React from \"react\";\nimport styled, {css} from \"styled-components\";\n\nconst StyledCard = styled.div`\n    padding: 1rem 1.5rem;\n    border-left: 4px solid ${(props) => props.theme.colors.secondaryTitle};\n    border-radius: 0 0.5rem 0.5rem 0;\n\n    background-color: ${(props) => props.theme.colors.primaryBackground[props.theme.elevation]};\n\n    ${(props) => props.hoverable && css`\n        cursor: pointer;\n\n        &:hover {\n            background-color: ${(props) => props.theme.colors.primaryBackground[props.theme.elevation + 1]};\n        }\n    `}\n`;\n\nexport default function Card({ children, ...props }) {\n    return (\n        <StyledCard {...props}>\n            {children}\n        </StyledCard>\n    )\n}\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport {StyledTextBase} from \"components/text/style\";\nimport PropTypes from \"prop-types\";\n\nconst StyledText = styled(StyledTextBase)`\n    ${(props) => props.small && css`\n        font-size: 0.8rem;\n        font-weight: bold;\n    `}\n`;\n\nexport default function Text({ children, ...props }) {\n    return (\n        <StyledText {...props}>\n            {children}\n        </StyledText>\n    );\n}\n\nText.propTypes = {\n    ...StyledText.propTypes,\n    small: PropTypes.bool\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport elevatedPrimaryBackground from \"styles/helper\";\nimport { Flex } from \"components/flex\";\n\nconst StyledSwitcher = styled(Flex).attrs({\n    flexInline: true,\n    gapsRow: \"0.5rem\"\n})`\n    background-color: ${elevatedPrimaryBackground};\n\n    border-radius: 1rem;\n`;\n\nexport default function Switcher({ children, ...props }) {\n    return (\n        <StyledSwitcher {...props}>\n            {children}\n        </StyledSwitcher>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\nimport {gapsColumn} from \"styles/mixins\";\nimport theme from \"theme\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  \n    ${gapsColumn(\"0.25rem\")}  \n  \n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    return (\n        <StyledSearchResultCard {...props}>\n            <Link to={to}>\n                <StyledCover alt=\"Cover\" src={image}/>\n            </Link>\n            <StyledBody>\n                <Text bold maxLines={2}>\n                    {typeof title === \"string\" ? (\n                        <Link to={to}>\n                            <Text link>{title}</Text>\n                        </Link>\n                    ) : title}\n                </Text>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n}\n\nexport function SearchResultDescription({ children }) {\n    return children.filter((child) => !!child).map((child, index, { length }) => (\n        <Text key={index} color={theme.colors.primaryMediumEmphasis}>\n            <span>{child}</span>\n            {index < length - 1 && (\n                <span color={theme.colors.primaryMediumEmphasis}> &bull; </span>\n            )}\n        </Text>\n    ));\n}\n","import React from \"react\";\nimport {graphql} from \"gatsby\";\nimport styled from \"styled-components\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport Title from \"components/text/title\";\nimport {gapsColumn} from \"styles/mixins\";\nimport Button from \"components/button\";\nimport { Flex } from \"components/flex\";\nimport SEO from \"components/seo\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\nimport YearNavigation from \"components/navigation/year\";\nimport SeasonNavigation from \"components/navigation/season\";\n\nconst seasonOrder = [ \"Winter\", \"Spring\", \"Summer\", \"Fall\" ];\nconst StyledPage = styled.div`\n    ${gapsColumn()}\n`;\n\nexport default function YearDetailPage({ data: { allAnime }, pageContext: { year, seasonList } }) {\n    const pageTitle = `${year} Anime`;\n    const animeBySeason = allAnime.groupedBySeason.sort((a, b) => seasonOrder.indexOf(a.fieldValue) - seasonOrder.indexOf(b.fieldValue));\n\n    return (\n        <StyledPage>\n            <SEO title={pageTitle} />\n            <YearNavigation year={year} />\n            <SeasonNavigation year={year} seasonList={seasonList} />\n            {animeBySeason.map(({ fieldValue: season, nodes: animeList }) => (\n                <SeasonPreview key={season} season={season} year={year} animeList={animeList}/>\n            ))}\n        </StyledPage>\n    );\n}\n\nfunction SeasonPreview({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{season}</Title>\n            {animeList.map((anime) => (\n                <AnimeSearchResultCard key={anime.slug} anime={anime}/>\n            ))}\n            <Flex justifyContent=\"center\">\n                <Button to={`/year/${year}/${season.toLowerCase()}`} icon>\n                    <FontAwesomeIcon icon={faChevronDown} fixedWidth/>\n                </Button>\n            </Flex>\n        </>\n    );\n}\n\nexport const query = graphql`\n    query($year: Int!) {\n        allAnime(filter: { year: { eq: $year } }) {\n            groupedBySeason: group(field: season, limit: 3) {\n                fieldValue\n                nodes {\n                    slug\n                    name\n                    themes {\n                        slug\n                        ...VideoSlug\n                    }\n                    resources {\n                        link\n                        site\n                    }\n                    images {\n                        facet\n                        link\n                    }\n                }\n            }\n        }\n    }\n`;\n","import {Link} from \"gatsby\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Text from \"components/text\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\nimport useImage from \"hooks/useImage\";\nimport createVideoSlug from \"utils/createVideoSlug\";\nimport { Flex } from \"components/flex\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { smallCover } = useImage(anime);\n\n    const animeLink = `/anime/${anime.slug}`;\n\n    let premiere = anime.year;\n    let premiereLink = `/year/${anime.year}`;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n        premiereLink += `/${anime.season.toLowerCase()}`;\n    }\n\n    let description = (\n        <SearchResultDescription>\n            <span>Anime</span>\n            {!!premiere && (\n                <Link to={premiereLink}>\n                    <Text link>{premiere}</Text>\n                </Link>\n            )}\n            <span>{anime.themes.length} themes</span>\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={description}\n            image={smallCover}\n            to={animeLink}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex flexWrap=\"wrap\" gapsBoth=\"0.75rem\">\n                        {anime.themes\n                            .slice(0, 4)\n                            .filter((theme) => theme.entries.length && theme.entries[0].videos.length)\n                            .map((theme) => {\n                                const entry = theme.entries[0];\n                                const video = entry.videos[0];\n                                const videoSlug = createVideoSlug(theme, entry, video);\n\n                                return (\n                                    <ButtonPlay key={theme.slug} to={`/anime/${anime.slug}/${videoSlug}`}>\n                                        <Text small block>{theme.slug}</Text>\n                                    </ButtonPlay>\n                                );\n                            })\n                        }\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\" to={animeLink}>\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleNotch, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, playing, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={playing ? faCircleNotch : faPlay} spin={playing} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","export default function useImage(resourceWithImages) {\n    const images = {};\n\n    if (resourceWithImages) {\n        for (const image of resourceWithImages.images) {\n            switch (image.facet) {\n                case \"Small Cover\":\n                    images.smallCover = image.link;\n                    break;\n                case \"Large Cover\":\n                    images.largeCover = image.link;\n                    break;\n                default:\n                // Ignore\n            }\n        }\n    }\n\n    return images;\n}\n","import { Flex } from \"components/flex\";\nimport Switcher from \"components/switcher\";\nimport Button from \"components/button\";\nimport React from \"react\";\n\nexport default function SeasonNavigation({ year, season, seasonList }) {\n    return (\n        <Flex justifyContent=\"center\">\n            <Switcher>\n                {seasonList.map((availableSeason) => (\n                    <Button key={availableSeason} to={`/year/${year}/${availableSeason.toLowerCase()}`} active={availableSeason === season}>{availableSeason}</Button>\n                ))}\n            </Switcher>\n        </Flex>\n    );\n}\n","import {graphql, Link, useStaticQuery} from \"gatsby\";\nimport Button from \"components/button\";\nimport Title from \"components/text/title\";\nimport styled from \"styled-components\";\nimport { Flex } from \"components/flex\";\n\nconst StyledYear = styled.div`\n    flex: 1;\n\n    display: flex;\n\n    margin: 0 1rem;\n`;\nconst StyledYearPrevious = styled(StyledYear)`\n    justify-content: flex-end;\n`;\nconst StyledYearNext = styled(StyledYear)`\n    justify-content: flex-start;\n`;\n\nexport default function YearNavigation({ year }) {\n    const yearList = useStaticQuery(graphql`\n        query {\n            allAnime {\n                groupedByYear: group(field: year) {\n                    year: fieldValue\n                }\n            }\n        }\n    `).allAnime.groupedByYear.map((group) => +group.year);\n\n    const previousYear = yearList.indexOf(year) > 0 ? yearList[yearList.indexOf(year) - 1] : null;\n    const nextYear = yearList.indexOf(year) < yearList.length - 1 ? yearList[yearList.indexOf(year) + 1] : null;\n\n    return (\n        <Flex alignItems=\"center\">\n            <StyledYearPrevious>\n                {previousYear && (\n                    <Link to={`/year/${previousYear}`}>\n                        <Button silent>{previousYear}</Button>\n                    </Link>\n                )}\n            </StyledYearPrevious>\n            <Button to=\"/year\" silent>\n                <Title>{year}</Title>\n            </Button>\n            <StyledYearNext>\n                {nextYear && (\n                    <Link to={`/year/${nextYear}`}>\n                        <Button silent>{nextYear}</Button>\n                    </Link>\n                )}\n            </StyledYearNext>\n        </Flex>\n    );\n}\n"],"sourceRoot":""}