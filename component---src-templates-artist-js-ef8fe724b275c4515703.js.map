{"version":3,"sources":["webpack:///./src/components/card/searchResult/theme.js","webpack:///./src/components/container/sidebar.js","webpack:///./src/templates/artist.js","webpack:///./src/components/descriptionList/index.js","webpack:///./src/components/externalLink/index.js"],"names":["ThemeSearchResultCard","theme","smallCover","useImage","anime","entries","length","entry","videos","video","videoSlug","createVideoSlug","description","slug","to","link","name","title","song","image","StyledContainerSidebar","styled","div","StyledSidebar","StyledBody","ContainerSidebar","sidebar","children","props","StyledArtistPage","gapsColumn","StyledCover","img","fullWidth","StyledList","ArtistDetailPage","artist","data","useAniList","performances","sort","a","b","localeCompare","src","alt","members","map","member","groups","group","resources","resource","href","site","variant","performance","query","StyledDescriptionList","dl","StyledKey","dt","StyledValue","dd","DescriptionList","Object","StyledExternalLink","Text","attrs","forwardedAs","gapsRow","ExternalLink","target","icon","faChevronCircleRight"],"mappings":"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","file":"component---src-templates-artist-js-ef8fe724b275c4515703.js","sourcesContent":["import { Link } from \"gatsby\";\nimport SearchResultCard, { SearchResultDescription } from \"components/card/searchResult\";\nimport SongTitleWithArtists from \"components/utils/songTitleWithArtists\";\nimport Text from \"components/text\";\nimport useImage from \"hooks/useImage\";\nimport createVideoSlug from \"utils/createVideoSlug\";\n\nexport default function ThemeSearchResultCard({ theme }) {\n    const { smallCover } = useImage(theme.anime);\n\n    if (!theme.entries.length) {\n        return null;\n    }\n\n    const entry = theme.entries[0];\n\n    if (!entry.videos.length) {\n        return null;\n    }\n\n    const video = entry.videos[0];\n    const videoSlug = createVideoSlug(theme, entry, video);\n\n    const description = (\n        <SearchResultDescription>\n            <span>Theme</span>\n            <span>{theme.slug}</span>\n            <Link to={`/anime/${theme.anime.slug}`}>\n                <Text link>{theme.anime.name}</Text>\n            </Link>\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={<SongTitleWithArtists song={theme.song}/>}\n            description={description}\n            image={smallCover}\n            to={`/anime/${theme.anime.slug}/${videoSlug}`}\n        />\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledContainerSidebar = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    @media (max-width: 720px) {\n        flex-direction: column;\n    }\n`;\nconst StyledSidebar = styled.div`\n    flex: 1;\n\n    @media (min-width: 721px) {\n        margin-right: 2rem;\n    }\n    @media (max-width: 720px) {\n        margin-bottom: 1.5rem;\n    }\n`;\nconst StyledBody = styled.div`\n    flex: 3;\n`;\n\nexport default function ContainerSidebar({ sidebar, children, ...props }) {\n    return (\n        <StyledContainerSidebar {...props}>\n            <StyledSidebar>\n                {sidebar}\n            </StyledSidebar>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledContainerSidebar>\n    );\n}\n","import React from \"react\";\nimport {graphql, Link} from \"gatsby\";\nimport styled from \"styled-components\";\nimport useAniList from \"../hooks/useAniListArtist\";\nimport ExternalLink from \"../components/externalLink\";\nimport DescriptionList from \"components/descriptionList\";\nimport Text from \"components/text\";\nimport Title from \"components/text/title\";\nimport Flex from \"components/flex\";\nimport ContainerSidebar from \"components/container/sidebar\";\nimport {fullWidth, gapsColumn} from \"styles/mixins\";\nimport ThemeSearchResultCard from \"components/card/searchResult/theme\";\nimport SEO from \"components/seo\";\n\nconst StyledArtistPage = styled.div`\n    ${gapsColumn(\"1.5rem\")}\n`;\nconst StyledCover = styled.img(fullWidth);\nconst StyledList = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    ${gapsColumn(\"0.5rem\")}\n\n    text-align: center;\n`;\n\nexport default function ArtistDetailPage({ data: { artist } }) {\n    const { image } = useAniList(artist);\n\n    const performances = artist.performances.sort((a, b) => {\n        return a.song.theme.anime.name.localeCompare(b.song.theme.anime.name);\n    });\n\n    const sidebar = (\n        <Flex gapsColumn=\"1.5rem\">\n            <StyledCover src={image} alt=\"Cover\"/>\n            <DescriptionList>\n                {{\n                    \"Members\": (\n                        !!artist.members && !!artist.members.length && (\n                            <StyledList>\n                                {artist.members.map((member) =>\n                                    <Link to={`/artist/${member.slug}`}>\n                                        <Text link>\n                                            {member.name}\n                                        </Text>\n                                    </Link>\n                                )}\n                            </StyledList>\n                        )\n                    ),\n                    \"Member of\": (\n                        !!artist.groups && !!artist.groups.length && (\n                            <StyledList>\n                                {artist.groups.map((group) =>\n                                    <Link to={`/artist/${group.slug}`}>\n                                        <Text link>\n                                            {group.name}\n                                        </Text>\n                                    </Link>\n                                )}\n                            </StyledList>\n                        )\n                    ),\n                    \"Links\": (\n                        artist.resources.map((resource) => (\n                            <ExternalLink key={resource.link} href={resource.link}>\n                                {resource.site}\n                            </ExternalLink>\n                        ))\n                    )\n                }}\n            </DescriptionList>\n        </Flex>\n    );\n\n    return (\n        <StyledArtistPage>\n            <SEO title={artist.name} />\n            <Title>{artist.name}</Title>\n            <ContainerSidebar sidebar={sidebar}>\n                <Flex gapsColumn=\"1rem\">\n                    <Title variant=\"section\">Song Perfomances</Title>\n                    {performances.map((performance) => (\n                        <ThemeSearchResultCard theme={{ ...performance.song.theme, song: performance.song }}/>\n                    ))}\n                </Flex>\n            </ContainerSidebar>\n        </StyledArtistPage>\n    );\n}\n\nexport const query = graphql`\n    query($slug: String!) {\n        artist(slug: { eq: $slug }) {\n            name\n            performances {\n                song {\n                    title\n                    performances {\n                        artist {\n                            slug\n                            name\n                        }\n                        as\n                    }\n                    theme {\n                        slug\n                        anime {\n                            slug\n                            name\n                            images {\n                                facet\n                                link\n                            }\n                        }\n                        ...VideoSlug\n                    }\n                }\n            }\n            resources {\n                link\n                site\n            }\n        }\n    }\n`;\n","import Title from \"components/text/title\";\nimport styled from \"styled-components\";\n\nconst StyledDescriptionList = styled.dl`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    margin: 0;\n`;\nconst StyledKey = styled.dt`\n    margin: 0 0 0.25rem 0;\n`;\nconst StyledValue = styled.dd`\n    margin: 0;\n\n    &:not(:last-child) {\n        margin-bottom: 1.5rem;\n    }\n`;\n\nexport default function DescriptionList({ children, ...props }) {\n    return (\n        <StyledDescriptionList {...props}>\n            {Object.entries(children).map(([ title, description ]) => (\n                !!description && (\n                    <>\n                        <StyledKey>\n                            <Title variant=\"section\">{title}</Title>\n                        </StyledKey>\n                        <StyledValue>{description}</StyledValue>\n                    </>\n                )\n            ))}\n        </StyledDescriptionList>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronCircleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport Text from \"components/text\";\nimport {gapsRow} from \"styles/mixins\";\n\nconst StyledExternalLink = styled(Text).attrs({\n    forwardedAs: \"a\",\n    link: true\n})`\n    ${gapsRow(\"0.25rem\")}\n`;\n\nexport default function ExternalLink({ href, children, ...props }) {\n    return (\n        <StyledExternalLink href={href} target=\"_blank\" {...props}>\n            <span>{children}</span>\n            <FontAwesomeIcon icon={faChevronCircleRight}/>\n        </StyledExternalLink>\n    );\n}\n"],"sourceRoot":""}