{"version":3,"sources":["webpack:///./src/components/switcher/index.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/templates/season.js"],"names":["StyledSwitcher","styled","div","elevatedPrimaryBackground","gapsRow","Switcher","children","props","StyledSearchResultCard","Card","StyledCover","img","StyledBody","gapsColumn","StyledChildren","SearchResultCard","title","description","image","to","card","alt","src","bold","color","theme","colors","secondaryTitle","maxLines","small","SearchResultDescription","filter","child","map","index","length","primaryMediumEmphasis","AnimeSearchResultCard","anime","hideThemes","useAniList","premiere","year","premiereLink","season","toLowerCase","link","themes","name","slug","row","wrap","gapsBoth","slice","entries","videos","filename","block","id","icon","faEllipsisH","fixedWidth","StyledButtonPlay","Button","StyledPrefix","secondaryBackground","primaryBackground","ButtonPlay","playing","faCircleNotch","faPlay","spin","StyledPage","StyledYearContainer","StyledYear","StyledYearPrevious","StyledYearNext","SeasonIndexPage","allAnime","data","pageContext","yearList","seasonList","previousYear","indexOf","nextYear","pageTitle","silent","justifyContent","availableSeason","active","SeasonDetail","animeList","nodes","YearOverview","SeasonPreview","variant","faChevronDown","query"],"mappings":"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","file":"component---src-templates-season-js-eb81e4242caaff70a312.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport elevatedPrimaryBackground from \"styles/helper\";\nimport {gapsRow} from \"styles/mixins\";\n\nconst StyledSwitcher = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    background-color: ${elevatedPrimaryBackground};\n\n    border-radius: 1rem;\n\n    ${gapsRow(\"0.5rem\")}\n`;\n\nexport default function Switcher({ children, ...props }) {\n    return (\n        <StyledSwitcher {...props}>\n            {children}\n        </StyledSwitcher>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\nimport {gapsColumn} from \"styles/mixins\";\nimport theme from \"theme\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  \n    ${gapsColumn(\"0.25rem\")}  \n  \n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    const card = (\n        <StyledSearchResultCard {...props}>\n            <StyledCover alt=\"Cover\" src={image}/>\n            <StyledBody>\n                <Text bold color={theme.colors.secondaryTitle} maxLines={2}>{title}</Text>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n\n    if (to) {\n        return (\n            <Link to={to}>\n                {card}\n            </Link>\n        );\n    }\n\n    return card;\n}\n\nexport function SearchResultDescription({ children }) {\n    return children.filter((child) => !!child).map((child, index, { length }) => (\n        <Text color={theme.colors.primaryMediumEmphasis}>\n            <span>{child}</span>\n            {index < length - 1 && (\n                <span color={theme.colors.primaryMediumEmphasis}> &bull; </span>\n            )}\n        </Text>\n    ));\n}\n","import {Link} from \"gatsby\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { image } = useAniList(anime);\n\n    let premiere = anime.year;\n    let premiereLink = `/year/${anime.year}`;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n        premiereLink += `/${anime.season.toLowerCase()}`;\n    }\n\n    let description = (\n        <SearchResultDescription>\n            <span>Anime</span>\n            {!!premiere && (\n                <Link to={premiereLink}>\n                    <Text link>{premiere}</Text>\n                </Link>\n            )}\n            <span>{anime.themes.length} themes</span>\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={description}\n            image={image}\n            to={`/anime/${anime.slug}`}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex row wrap gapsBoth=\"0.75rem\">\n                        {anime.themes.slice(0, 4).filter((theme) => {\n                            return theme.entries.length && theme.entries[0].videos.length;\n                        }).map((theme) => (\n                            <ButtonPlay key={theme.id} to={`/video/${theme.entries[0].videos[0].filename}`}>\n                                <Text small block>{theme.slug}</Text>\n                            </ButtonPlay>\n                        ))}\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\">\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleNotch, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, playing, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={playing ? faCircleNotch : faPlay} spin={playing} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","import React from \"react\";\nimport {graphql, Link} from \"gatsby\";\nimport styled from \"styled-components\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport Title from \"components/text/title\";\nimport {gapsColumn} from \"styles/mixins\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Switcher from \"components/switcher\";\nimport SEO from \"components/seo\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\n\nconst StyledPage = styled.div`\n    ${gapsColumn()}\n`;\nconst StyledYearContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\nconst StyledYear = styled.div`\n    flex: 1;\n\n    display: flex;\n\n    margin: 0 1rem;\n`;\nconst StyledYearPrevious = styled(StyledYear)`\n    justify-content: flex-end;\n`;\nconst StyledYearNext = styled(StyledYear)`\n    justify-content: flex-start;\n`;\n\nexport default function SeasonIndexPage({ data: { allAnime }, pageContext: { year, season, yearList, seasonList } }) {\n    const previousYear = yearList.indexOf(year) > 0 ? yearList[yearList.indexOf(year) - 1] : null;\n    const nextYear = yearList.indexOf(year) < yearList.length - 1 ? yearList[yearList.indexOf(year) + 1] : null;\n    \n    const pageTitle = season ? `${season} ${year} Anime` : `${year} Anime`;\n\n    return (\n        <StyledPage>\n            <SEO title={pageTitle} />\n            <StyledYearContainer>\n                <StyledYearPrevious>\n                    {previousYear && (\n                        <Link to={`/year/${previousYear}`}>\n                            <Button silent>{previousYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearPrevious>\n                <Button to=\"/year\" silent>\n                    <Title>{year}</Title>\n                </Button>\n                <StyledYearNext>\n                    {nextYear && (\n                        <Link to={`/year/${nextYear}`}>\n                            <Button silent>{nextYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearNext>\n            </StyledYearContainer>\n            <Flex row justifyContent=\"center\">\n                <Switcher>\n                    {seasonList.map((availableSeason) => (\n                        <Button to={`/year/${year}/${availableSeason.toLowerCase()}`} active={availableSeason === season}>{availableSeason}</Button>\n                    ))}\n                </Switcher>\n            </Flex>\n            {season ? (\n                <SeasonDetail season={season} year={year} animeList={allAnime.nodes}/>\n            ) : (\n                <YearOverview year={year} seasonList={seasonList} animeList={allAnime.nodes}/>\n            )}\n        </StyledPage>\n    );\n}\n\nfunction YearOverview({ year, seasonList, animeList }) {\n    return seasonList.map((season) => (\n        <SeasonPreview key={season} season={season} year={year} animeList={animeList}/>\n    ));\n}\n\nfunction SeasonPreview({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{season}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.slice(0, 3).map((anime) => (\n                    <AnimeSearchResultCard key={anime.slug} anime={anime}/>\n                ))}\n            </Flex>\n            <Flex row justifyContent=\"center\">\n                <Button to={`/year/${year}/${season.toLowerCase()}`} icon>\n                    <FontAwesomeIcon icon={faChevronDown} fixedWidth/>\n                </Button>\n            </Flex>\n        </>\n    );\n}\n\nfunction SeasonDetail({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{`Anime from ${season} of ${year}`}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.map((anime) => (\n                    <AnimeSearchResultCard key={anime.slug} anime={anime}/>\n                ))}\n            </Flex>\n        </>\n    );\n}\n\nexport const query = graphql`\n    query($year: Int!, $season: String) {\n        allAnime(filter: {year: {eq: $year}, season: {eq: $season}}) {\n            nodes {\n                slug\n                name\n                themes {\n                    slug\n                    entries {\n                        videos {\n                            filename\n                        }\n                    }\n                }\n                resources {\n                    link\n                    site\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}