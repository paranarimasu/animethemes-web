{"version":3,"sources":["webpack:///./src/components/switcher/index.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/templates/season.js"],"names":["StyledSwitcher","styled","div","elevatedPrimaryBackground","gapsRow","Switcher","children","props","StyledSearchResultCard","Card","StyledCover","img","StyledBody","gapsColumn","StyledChildren","SearchResultCard","title","description","image","to","card","alt","src","variant","maxLines","small","AnimeSearchResultCard","anime","hideThemes","useAniList","premiere","year","premiereLink","season","toLowerCase","link","themes","length","name","slug","row","wrap","gapsBoth","slice","filter","theme","entries","videos","map","filename","block","id","icon","faEllipsisH","fixedWidth","StyledButtonPlay","Button","StyledPrefix","colors","secondaryBackground","primaryBackground","ButtonPlay","playing","faCircleNotch","faPlay","spin","StyledPage","StyledYearContainer","StyledYear","StyledYearPrevious","StyledYearNext","SeasonIndexPage","allAnime","data","pageContext","yearList","seasonList","previousYear","indexOf","nextYear","pageTitle","silent","justifyContent","availableSeason","active","SeasonDetail","animeList","nodes","YearOverview","SeasonPreview","faChevronDown","query"],"mappings":"4MAKMA,EAAiBC,IAAOC,IAAV,8EAAGD,CAAH,gFAIIE,IAIlBC,YAAQ,WAGC,SAASC,EAAT,GAA2C,IAAvBC,EAAsB,EAAtBA,SAAaC,EAAS,4BACrD,OACI,cAACP,EAAD,iBAAoBO,EAApB,UACKD,O,oLCXPE,EAAyBP,YAAOQ,KAAV,uFAAGR,CAAH,4EAOtBS,EAAcT,IAAOU,IAAV,4EAAGV,CAAH,8CAKXW,EAAaX,IAAOC,IAAV,2EAAGD,CAAH,2FAOVY,YAAW,YAIXC,EAAiBb,IAAOC,IAAV,+EAAGD,CAAH,6CAML,SAASc,EAAT,GAAkF,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,GAAIb,EAAsB,EAAtBA,SAAaC,EAAS,+DACtFa,EACF,eAACZ,EAAD,iBAA4BD,EAA5B,WACI,cAACG,EAAD,CAAaW,IAAI,QAAQC,IAAKJ,IAC9B,eAACN,EAAD,WACI,cAAC,IAAD,CAAOW,QAAQ,OAAOC,SAAU,EAAhC,SAAoCR,IACpC,cAAC,IAAD,CAAMS,OAAK,EAACD,SAAU,EAAtB,SAA0BP,OAE9B,cAACH,EAAD,UACKR,QAKb,OAAIa,EAEI,cAAC,OAAD,CAAMA,GAAIA,EAAV,SACKC,IAKNA,I,4MChDI,SAASM,EAAT,GAA+D,IAA9BC,EAA6B,EAA7BA,MAA6B,IAAtBC,kBAAsB,SACjEV,EAAUW,YAAWF,GAArBT,MAEJY,EAAWH,EAAMI,KACjBC,EAAY,SAAYL,EAAMI,KAC9BJ,EAAMM,SACNH,EAAWH,EAAMM,OAAS,IAAMH,EAChCE,GAAY,IAAQL,EAAMM,OAAOC,eAGrC,IAAIjB,EACA,qCACI,2CACGa,GACC,qCACI,uCACA,cAAC,OAAD,CAAMX,GAAIa,EAAV,SACI,cAAC,IAAD,CAAMG,MAAI,EAAV,SAAYL,SAIxB,uCAAUH,EAAMS,OAAOC,OAAvB,gBAIR,OACI,cAAC,IAAD,CACIrB,MAAOW,EAAMW,KACbrB,YAAaA,EACbC,MAAOA,EACPC,GAAE,UAAYQ,EAAMY,KAJxB,UAMMX,GACE,cAAC,IAAD,UACI,eAAC,IAAD,CAAMY,KAAG,EAACC,MAAI,EAACC,SAAS,UAAxB,UACKf,EAAMS,OAAOO,MAAM,EAAG,GAAGC,QAAO,SAACC,GAC9B,OAAOA,EAAMC,QAAQT,QAAUQ,EAAMC,QAAQ,GAAGC,OAAOV,UACxDW,KAAI,SAACH,GAAD,OACH,cAAC,IAAD,CAA2B1B,GAAE,UAAY0B,EAAMC,QAAQ,GAAGC,OAAO,GAAGE,SAApE,SACI,cAAC,IAAD,CAAMxB,OAAK,EAACyB,OAAK,EAAjB,SAAmBL,EAAMN,QADZM,EAAMM,OAI1BxB,EAAMS,OAAOC,OAAS,GACnB,cAAC,IAAD,CAAQe,MAAI,EAACpC,MAAM,kBAAnB,SACI,cAAC,IAAD,CAAiBoC,KAAMC,IAAaC,YAAU,e,4JCjDxEC,EAAmBtD,YAAOuD,KAAV,6EAAGvD,CAAH,+FAQhBwD,EAAexD,IAAOC,IAAV,yEAAGD,CAAH,+JAUM,SAACM,GAAD,OAAWA,EAAMsC,MAAMa,OAAOC,uBACzC,SAACpD,GAAD,OAAWA,EAAMsC,MAAMa,OAAOE,kBAAkB,MAEvDhD,EAAaX,IAAOC,IAAV,uEAAGD,CAAH,qBAID,SAAS4D,EAAT,GAAsD,IAAhCvD,EAA+B,EAA/BA,SAAUwD,EAAqB,EAArBA,QAAYvD,EAAS,sCAChE,OACI,eAACgD,EAAD,iBAAsBhD,EAAtB,WACI,cAACkD,EAAD,UACI,cAAC,IAAD,CAAiBL,KAAMU,EAAUC,IAAgBC,IAAQC,KAAMH,EAASR,YAAU,MAEtF,cAAC1C,EAAD,UACKN,U,uRCzBX4D,EAAajE,IAAOC,IAAV,yEAAGD,CAAH,QACVY,eAEAsD,EAAsBlE,IAAOC,IAAV,kFAAGD,CAAH,yDAKnBmE,EAAanE,IAAOC,IAAV,yEAAGD,CAAH,wCAOVoE,EAAqBpE,YAAOmE,GAAV,iFAAGnE,CAAH,+BAGlBqE,EAAiBrE,YAAOmE,GAAV,6EAAGnE,CAAH,iCAIL,SAASsE,EAAT,GAAuG,IAApEC,EAAmE,EAA3EC,KAAQD,SAAmE,IAAvDE,YAAe3C,EAAwC,EAAxCA,KAAME,EAAkC,EAAlCA,OAAQ0C,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAC3FC,EAAeF,EAASG,QAAQ/C,GAAQ,EAAI4C,EAASA,EAASG,QAAQ/C,GAAQ,GAAK,KACnFgD,EAAWJ,EAASG,QAAQ/C,GAAQ4C,EAAStC,OAAS,EAAIsC,EAASA,EAASG,QAAQ/C,GAAQ,GAAK,KAEjGiD,EAAY/C,EAAYA,EAAN,IAAgBF,EAAhB,SAAkCA,EAAlC,SAExB,OACI,eAACmC,EAAD,WACI,cAAC,IAAD,CAAKlD,MAAOgE,IACZ,eAACb,EAAD,WACI,cAACE,EAAD,UACKQ,GACG,cAAC,OAAD,CAAM1D,GAAE,SAAW0D,EAAnB,SACI,cAAC,IAAD,CAAQI,QAAM,EAAd,SAAgBJ,QAI5B,cAAC,IAAD,CAAQ1D,GAAG,QAAQ8D,QAAM,EAAzB,SACI,cAAC,IAAD,UAAQlD,MAEZ,cAACuC,EAAD,UACKS,GACG,cAAC,OAAD,CAAM5D,GAAE,SAAW4D,EAAnB,SACI,cAAC,IAAD,CAAQE,QAAM,EAAd,SAAgBF,WAKhC,cAAC,IAAD,CAAMvC,KAAG,EAAC0C,eAAe,SAAzB,SACI,cAAC,IAAD,UACKN,EAAW5B,KAAI,SAACmC,GAAD,OACZ,cAAC,IAAD,CAAQhE,GAAE,SAAWY,EAAX,IAAmBoD,EAAgBjD,cAAiBkD,OAAQD,IAAoBlD,EAA1F,SAAmGkD,WAI9GlD,EACG,cAACoD,EAAD,CAAcpD,OAAQA,EAAQF,KAAMA,EAAMuD,UAAWd,EAASe,QAE9D,cAACC,EAAD,CAAczD,KAAMA,EAAM6C,WAAYA,EAAYU,UAAWd,EAASe,WAMtF,SAASC,EAAT,GAAwD,IAAhCzD,EAA+B,EAA/BA,KAAM6C,EAAyB,EAAzBA,WAAYU,EAAa,EAAbA,UACtC,OAAOV,EAAW5B,KAAI,SAACf,GAAD,OAClB,cAACwD,EAAD,CAA4BxD,OAAQA,EAAQF,KAAMA,EAAMuD,UAAWA,GAA/CrD,MAI5B,SAASwD,EAAT,GAAqD,IAA5BxD,EAA2B,EAA3BA,OAAQF,EAAmB,EAAnBA,KAAMuD,EAAa,EAAbA,UACnC,OACI,qCACI,cAAC,IAAD,CAAO/D,QAAQ,UAAf,SAA0BU,IAC1B,cAAC,IAAD,CAAMpB,WAAW,OAAjB,SACKyE,EAAU3C,MAAM,EAAG,GAAGK,KAAI,SAACrB,GAAD,OACvB,cAAC,IAAD,CAAwCA,MAAOA,GAAnBA,EAAMY,WAG1C,cAAC,IAAD,CAAMC,KAAG,EAAC0C,eAAe,SAAzB,SACI,cAAC,IAAD,CAAQ/D,GAAE,SAAWY,EAAX,IAAmBE,EAAOC,cAAiBkB,MAAI,EAAzD,SACI,cAAC,IAAD,CAAiBA,KAAMsC,IAAepC,YAAU,WAOpE,SAAS+B,EAAT,GAAoD,IAA5BpD,EAA2B,EAA3BA,OAAQF,EAAmB,EAAnBA,KAAMuD,EAAa,EAAbA,UAClC,OACI,qCACI,cAAC,IAAD,CAAO/D,QAAQ,UAAf,uBAAwCU,EAAxC,OAAqDF,IACrD,cAAC,IAAD,CAAMlB,WAAW,OAAjB,SACKyE,EAAUtC,KAAI,SAACrB,GAAD,OACX,cAAC,IAAD,CAAwCA,MAAOA,GAAnBA,EAAMY,cAO/C,IAAMoD,EAAK","file":"component---src-templates-season-js-2e01ab940eaa79fd4190.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport elevatedPrimaryBackground from \"styles/helper\";\nimport {gapsRow} from \"styles/mixins\";\n\nconst StyledSwitcher = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    background-color: ${elevatedPrimaryBackground};\n\n    border-radius: 1rem;\n\n    ${gapsRow(\"0.5rem\")}\n`;\n\nexport default function Switcher({ children, ...props }) {\n    return (\n        <StyledSwitcher {...props}>\n            {children}\n        </StyledSwitcher>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport Title from \"components/text/title\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\nimport {gapsColumn} from \"styles/mixins\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  \n    ${gapsColumn(\"0.25rem\")}  \n  \n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    const card = (\n        <StyledSearchResultCard {...props}>\n            <StyledCover alt=\"Cover\" src={image}/>\n            <StyledBody>\n                <Title variant=\"card\" maxLines={2}>{title}</Title>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n\n    if (to) {\n        return (\n            <Link to={to}>\n                {card}\n            </Link>\n        );\n    }\n\n    return card;\n}\n","import {Link} from \"gatsby\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport SearchResultCard from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { image } = useAniList(anime);\n\n    let premiere = anime.year;\n    let premiereLink = `/year/${anime.year}`;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n        premiereLink += `/${anime.season.toLowerCase()}`;\n    }\n\n    let description = (\n        <>\n            <span>Anime</span>\n            {!!premiere && (\n                <>\n                    <span> • </span>\n                    <Link to={premiereLink}>\n                        <Text link>{premiere}</Text>\n                    </Link>\n                </>\n            )}\n            <span> • {anime.themes.length} themes</span>\n        </>\n    );\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={description}\n            image={image}\n            to={`/anime/${anime.slug}`}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex row wrap gapsBoth=\"0.75rem\">\n                        {anime.themes.slice(0, 4).filter((theme) => {\n                            return theme.entries.length && theme.entries[0].videos.length;\n                        }).map((theme) => (\n                            <ButtonPlay key={theme.id} to={`/video/${theme.entries[0].videos[0].filename}`}>\n                                <Text small block>{theme.slug}</Text>\n                            </ButtonPlay>\n                        ))}\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\">\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleNotch, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, playing, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={playing ? faCircleNotch : faPlay} spin={playing} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","import React from \"react\";\nimport {graphql, Link} from \"gatsby\";\nimport styled from \"styled-components\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport Title from \"components/text/title\";\nimport {gapsColumn} from \"styles/mixins\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Switcher from \"components/switcher\";\nimport SEO from \"components/seo\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\n\nconst StyledPage = styled.div`\n    ${gapsColumn()}\n`;\nconst StyledYearContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\nconst StyledYear = styled.div`\n    flex: 1;\n\n    display: flex;\n\n    margin: 0 1rem;\n`;\nconst StyledYearPrevious = styled(StyledYear)`\n    justify-content: flex-end;\n`;\nconst StyledYearNext = styled(StyledYear)`\n    justify-content: flex-start;\n`;\n\nexport default function SeasonIndexPage({ data: { allAnime }, pageContext: { year, season, yearList, seasonList } }) {\n    const previousYear = yearList.indexOf(year) > 0 ? yearList[yearList.indexOf(year) - 1] : null;\n    const nextYear = yearList.indexOf(year) < yearList.length - 1 ? yearList[yearList.indexOf(year) + 1] : null;\n    \n    const pageTitle = season ? `${season} ${year} Anime` : `${year} Anime`;\n\n    return (\n        <StyledPage>\n            <SEO title={pageTitle} />\n            <StyledYearContainer>\n                <StyledYearPrevious>\n                    {previousYear && (\n                        <Link to={`/year/${previousYear}`}>\n                            <Button silent>{previousYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearPrevious>\n                <Button to=\"/year\" silent>\n                    <Title>{year}</Title>\n                </Button>\n                <StyledYearNext>\n                    {nextYear && (\n                        <Link to={`/year/${nextYear}`}>\n                            <Button silent>{nextYear}</Button>\n                        </Link>\n                    )}\n                </StyledYearNext>\n            </StyledYearContainer>\n            <Flex row justifyContent=\"center\">\n                <Switcher>\n                    {seasonList.map((availableSeason) => (\n                        <Button to={`/year/${year}/${availableSeason.toLowerCase()}`} active={availableSeason === season}>{availableSeason}</Button>\n                    ))}\n                </Switcher>\n            </Flex>\n            {season ? (\n                <SeasonDetail season={season} year={year} animeList={allAnime.nodes}/>\n            ) : (\n                <YearOverview year={year} seasonList={seasonList} animeList={allAnime.nodes}/>\n            )}\n        </StyledPage>\n    );\n}\n\nfunction YearOverview({ year, seasonList, animeList }) {\n    return seasonList.map((season) => (\n        <SeasonPreview key={season} season={season} year={year} animeList={animeList}/>\n    ));\n}\n\nfunction SeasonPreview({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{season}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.slice(0, 3).map((anime) => (\n                    <AnimeSearchResultCard key={anime.slug} anime={anime}/>\n                ))}\n            </Flex>\n            <Flex row justifyContent=\"center\">\n                <Button to={`/year/${year}/${season.toLowerCase()}`} icon>\n                    <FontAwesomeIcon icon={faChevronDown} fixedWidth/>\n                </Button>\n            </Flex>\n        </>\n    );\n}\n\nfunction SeasonDetail({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{`Anime from ${season} of ${year}`}</Title>\n            <Flex gapsColumn=\"1rem\">\n                {animeList.map((anime) => (\n                    <AnimeSearchResultCard key={anime.slug} anime={anime}/>\n                ))}\n            </Flex>\n        </>\n    );\n}\n\nexport const query = graphql`\n    query($year: Int!, $season: String) {\n        allAnime(filter: {year: {eq: $year}, season: {eq: $season}}) {\n            nodes {\n                slug\n                name\n                themes {\n                    slug\n                    entries {\n                        videos {\n                            filename\n                        }\n                    }\n                }\n                resources {\n                    link\n                    site\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}