{"version":3,"sources":["webpack:///./src/components/tag/index.js","webpack:///./src/components/utils/themeEntryTags.js","webpack:///./src/components/utils/videoTags.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/components/card/searchResult/artist.js","webpack:///./src/templates/video.js","webpack:///./src/components/button/video.js"],"names":["StyledTag","styled","span","gapsRow","StyledTagIcon","FontAwesomeIcon","props","theme","colors","primaryLowEmphasis","warning","css","warningTitle","Tag","icon","iconProps","children","fixedWidth","small","color","primaryHighEmphasis","ThemeEntryTags","entry","row","wrap","gapsBoth","faFilm","episodes","spoiler","faBomb","nsfw","faExclamationTriangle","VideoTags","video","title","resolution","nc","faNotEqual","subbed","faClosedCaptioning","lyrics","faComment","uncen","faEye","source","faCompactDisc","toUpperCase","overlap","faStream","AnimeSearchResultCard","anime","hideThemes","smallCover","useImage","premiere","year","premiereLink","season","toLowerCase","description","to","link","themes","length","name","image","slug","slice","filter","entries","videos","map","videoSlug","createVideoSlug","block","id","faEllipsisH","StyledButtonPlay","Button","StyledPrefix","div","secondaryBackground","primaryBackground","StyledBody","ButtonPlay","playing","faCircleNotch","faPlay","spin","ArtistSearchResultCard","artist","useAniListArtist","performances","StyledVideoInfo","Flex","attrs","gapsColumn","VideoPage","data","siteName","useSiteMeta","useEffect","navigator","mediaSession","metadata","MediaMetadata","song","performance","as","join","undefined","album","artwork","src","sizes","type","artistStr","version","otherEntries","otherEntry","otherVideo","filename","pageTitle","pageDesc","reduce","str","index","alignItems","flex","justifyContent","bold","maxLines","variant","query","VideoButton","currentVideo","useContext","PlayerContext"],"mappings":"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","file":"component---src-templates-video-js-be863d0deb87d5189e7b.js","sourcesContent":["import React from \"react\";\nimport styled, {css} from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {gapsRow} from \"styles/mixins\";\nimport Text from \"components/text\";\nimport theme from \"theme\";\n\nconst StyledTag = styled.span`\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n\n    ${gapsRow(\"0.25rem\")}\n`;\nconst StyledTagIcon = styled(FontAwesomeIcon)`\n    color: ${(props) => props.theme.colors.primaryLowEmphasis};\n\n    ${(props) => props.warning && css`\n        color: ${(props) => props.theme.colors.warningTitle};\n    `}\n`;\n\nexport default function Tag({ icon, iconProps, warning, children, ...props }) {\n    return (\n        <StyledTag {...props}>\n            {!!icon && (\n                <StyledTagIcon icon={icon} fixedWidth warning={warning} {...iconProps}/>\n            )}\n            {!!children && (\n                <Text small color={theme.colors.primaryHighEmphasis}>\n                    {children}\n                </Text>\n            )}\n        </StyledTag>\n    );\n}\n","import Tag from \"components/tag\";\nimport {faBomb, faExclamationTriangle, faFilm} from \"@fortawesome/free-solid-svg-icons\";\nimport Flex from \"components/flex\";\nimport React from \"react\";\n\nexport default function ThemeEntryTags({ entry }) {\n    return (\n        <Flex row wrap gapsBoth=\"0.75rem\">\n            <Tag icon={faFilm}>\n                {entry.episodes || \"â€”\"}\n            </Tag>\n            {!!entry.spoiler && (\n                <Tag icon={faBomb} warning>\n                    SPOILER\n                </Tag>\n            )}\n            {!!entry.nsfw && (\n                <Tag icon={faExclamationTriangle} warning>\n                    NSFW\n                </Tag>\n            )}\n        </Flex>\n    );\n}\n","import {\n    faClosedCaptioning,\n    faComment,\n    faCompactDisc,\n    faEye,\n    faNotEqual,\n    faStream\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Tag from \"components/tag\";\nimport Flex from \"components/flex\";\n\nexport default function VideoTags({ video }) {\n    return (\n        <Flex row wrap gapsBoth=\"0.75rem\">\n            <Tag title=\"Resolution\">\n                {video.resolution}p\n            </Tag>\n\n            {!!video.nc && (\n                <Tag icon={faNotEqual} title=\"No Credits\"/>\n            )}\n\n            {!!video.subbed && (\n                <Tag icon={faClosedCaptioning} title=\"With Subtitles\"/>\n            )}\n\n            {!!video.lyrics && (\n                <Tag icon={faComment} title=\"With Lyrics\"/>\n            )}\n\n            {!!video.uncen && (\n                <Tag icon={faEye} title=\"Uncensored\"/>\n            )}\n\n            {!!video.source && (\n                <Tag icon={faCompactDisc} title=\"Source\">\n                    {video.source.toUpperCase()}\n                </Tag>\n            )}\n\n            {video.overlap !== \"None\" && (\n                <Tag icon={faStream} title=\"Overlap\">\n                    {video.overlap.toUpperCase()}\n                </Tag>\n            )}\n        </Flex>\n    );\n}\n","import {Link} from \"gatsby\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\nimport useImage from \"hooks/useImage\";\nimport createVideoSlug from \"utils/createVideoSlug\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { smallCover } = useImage(anime);\n\n    let premiere = anime.year;\n    let premiereLink = `/year/${anime.year}`;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n        premiereLink += `/${anime.season.toLowerCase()}`;\n    }\n\n    let description = (\n        <SearchResultDescription>\n            <span>Anime</span>\n            {!!premiere && (\n                <Link to={premiereLink}>\n                    <Text link>{premiere}</Text>\n                </Link>\n            )}\n            <span>{anime.themes.length} themes</span>\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={description}\n            image={smallCover}\n            to={`/anime/${anime.slug}`}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex row wrap gapsBoth=\"0.75rem\">\n                        {anime.themes\n                            .slice(0, 4)\n                            .filter((theme) => theme.entries.length && theme.entries[0].videos.length)\n                            .map((theme) => {\n                                const entry = theme.entries[0];\n                                const video = entry.videos[0];\n                                const videoSlug = createVideoSlug(theme, entry, video);\n\n                                return (\n                                    <ButtonPlay key={theme.id} to={`/anime/${anime.slug}/${videoSlug}`}>\n                                        <Text small block>{theme.slug}</Text>\n                                    </ButtonPlay>\n                                );\n                            })\n                        }\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\">\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleNotch, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, playing, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={playing ? faCircleNotch : faPlay} spin={playing} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","import React from \"react\";\nimport useAniListArtist from \"hooks/useAniListArtist\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\n\nexport default function ArtistSearchResultCard({ artist }) {\n    const { image } = useAniListArtist(artist);\n\n    const description = (\n        <SearchResultDescription>\n            <span>Artist</span>\n            {!!artist.performances && (\n                <span>{artist.performances.length} songs</span>\n            )}\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={artist.name}\n            description={description}\n            image={image}\n            to={`/artist/${artist.slug}`}\n        />\n    );\n}\n","import { Fragment, useEffect } from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport Flex, { FlexItem } from \"components/flex\";\nimport styled from \"styled-components\";\nimport Text from \"components/text\";\nimport useSiteMeta from \"hooks/useSiteMeta\";\nimport SongTitleWithArtists from \"components/utils/songTitleWithArtists\";\nimport VideoTags from \"components/utils/videoTags\";\nimport ThemeEntryTags from \"components/utils/themeEntryTags\";\nimport Title from \"components/text/title\";\nimport VideoButton from \"components/button/video\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport ArtistSearchResultCard from \"components/card/searchResult/artist\";\nimport SEO from \"components/seo\";\nimport useImage from \"hooks/useImage\";\n\nconst StyledVideoInfo = styled(Flex).attrs({\n    gapsColumn: \"2rem\"\n})`\n    padding: 0 1rem;\n`;\n\nexport default function VideoPage({ data: { video, entry } }) {\n    const theme = entry.theme;\n    const anime = theme.anime;\n\n    const { siteName } = useSiteMeta();\n    const { smallCover } = useImage(anime);\n\n    useEffect(() => {\n        if (theme && smallCover) {\n            // eslint-disable-next-line no-undef\n            navigator.mediaSession.metadata = new MediaMetadata({\n                title: `${theme.slug} â€¢ ${theme.song.title}`,\n                artist: theme.song.performances ? theme.song.performances.map((performance) => performance.as || performance.artist.name).join(\", \") : undefined,\n                album: anime.name,\n                artwork: [\n                    { src: smallCover, sizes: \"512x512\", type: \"image/jpeg\" }\n                ]\n            });\n        }\n    }, [ anime, theme, smallCover ]);\n\n    const otherEntries = theme.entries.map(otherEntry => {\n        const videos = otherEntry.videos.filter((otherVideo) => otherVideo.filename !== video.filename);\n\n        if (!videos.length) {\n            return null;\n        }\n\n        return {\n            ...otherEntry,\n            videos\n        };\n    }).filter((otherEntry) => !!otherEntry);\n\n    // Generates and returns page title\n    const pageTitle = entry.version\n        ? `${theme.song.title} (${anime.name} ${theme.slug} V${entry.version})`\n        : `${theme.song.title} (${anime.name} ${theme.slug})`;\n\n    const pageDesc = (() => {\n        // Generates and returns page description for SEO\n        let song = theme.song,\n            artistStr = \"\",\n            version = entry.version ? ` Version ${entry.version}` : \"\";\n        if (song.performances && song.performances.length) {\n            artistStr = song.performances.reduce((str, performance, index, { length }) => {\n                str += performance.as || performance.artist.name;\n                if (index < length - 1) {\n                    str += (index === length - 2 ? \" & \" : \", \");\n                }\n                return str;\n            }, \" by \");\n        }\n        return `Watch ${anime.name} ${theme.slug}${version}: ${song.title}${artistStr} on ${siteName}`;\n    })();\n\n    return (\n        <StyledVideoInfo>\n            <SEO title={pageTitle} description={pageDesc} />\n            <Flex row alignItems=\"center\" gapsRow=\"1rem\">\n                <FlexItem flex={1}>\n                    <Flex justifyContent=\"center\" gapsColumn=\"0.25rem\">\n                        <Text bold>\n                            <SongTitleWithArtists song={theme.song}/>\n                        </Text>\n                        <Text small maxLines={1}>\n                            <Text>{theme.slug} from </Text>\n                            <Link to={`/anime/${anime.slug}`}>\n                                <Text link>{anime.name}</Text>\n                            </Link>\n                        </Text>\n                    </Flex>\n                </FlexItem>\n                <Flex row alignItems=\"center\" gapsRow=\"0.5rem\">\n                    <Text small>Version {entry.version || 1}</Text>\n                    <ThemeEntryTags entry={entry}/>\n                    <Text link>&bull;</Text>\n                    <VideoTags video={video}/>\n                </Flex>\n            </Flex>\n            <Flex row gapsRow=\"2rem\">\n                <FlexItem flex={2}>\n                    <Flex gapsColumn=\"1rem\">\n                        <Title variant=\"section\">Related entries</Title>\n                        <Flex row gapsRow=\"1rem\">\n                            <FlexItem flex={1}>\n                                <AnimeSearchResultCard anime={anime} hideThemes/>\n                            </FlexItem>\n                            <FlexItem flex={1}>\n                                <Flex gapsColumn=\"1rem\">\n                                    {!!theme.song.performances && theme.song.performances.map((performance) => (\n                                        <ArtistSearchResultCard key={performance.artist.name} artist={performance.artist}/>\n                                    ))}\n                                </Flex>\n                            </FlexItem>\n                        </Flex>\n                    </Flex>\n                </FlexItem>\n                <FlexItem flex={1}>\n                    {!!otherEntries.length && (\n                        <Flex gapsColumn=\"1rem\" alignItems=\"flex-end\">\n                            <Title variant=\"section\">Other versions</Title>\n                            {otherEntries.map((otherEntry) => (\n                                <Fragment key={otherEntry.version}>\n                                    <Flex row alignItems=\"center\" gapsRow=\"0.5rem\">\n                                        <Text small>Version {otherEntry.version || 1}</Text>\n                                        <ThemeEntryTags entry={otherEntry}/>\n                                    </Flex>\n                                    {otherEntry.videos.map((video, index) => (\n                                        <VideoButton\n                                            key={index}\n                                            anime={anime}\n                                            theme={theme}\n                                            entry={entry}\n                                            video={video}\n                                        />\n                                    ))}\n                                </Fragment>\n                            ))}\n                        </Flex>\n                    )}\n                </FlexItem>\n            </Flex>\n        </StyledVideoInfo>\n    );\n}\n\nexport const query = graphql`\n    query($id: String!, $entryId: String!) {\n        video(id: { eq: $id }) {\n            filename\n            basename\n            link\n            lyrics\n            nc\n            overlap\n            resolution\n            source\n            subbed\n            uncen\n        }\n        entry(id: { eq: $entryId }) {\n            episodes\n            nsfw\n            spoiler\n            version\n            theme {\n                slug\n                anime {\n                    name\n                    slug\n                    year\n                    season\n                    themes {\n                        slug\n                    }\n                    resources {\n                        site\n                        link\n                    }\n                    images {\n                        facet\n                        link\n                    }\n                }\n                song {\n                    title\n                    performances {\n                        artist {\n                            name\n                            slug\n                        }\n                        as\n                    }\n                }\n                entries {\n                    episodes\n                    nsfw\n                    spoiler\n                    version\n                    videos {\n                        filename\n                        lyrics\n                        nc\n                        overlap\n                        resolution\n                        source\n                        subbed\n                        uncen\n                    }\n                }\n                ...VideoSlug\n            }\n        }\n    }\n`\n","import ButtonPlay from \"components/button/play\";\nimport VideoTags from \"components/utils/videoTags\";\nimport {useContext} from \"react\";\nimport PlayerContext from \"context/playerContext\";\nimport createVideoSlug from \"utils/createVideoSlug\";\n\nexport default function VideoButton({ anime, theme, entry, video, ...props }) {\n    const { currentVideo } = useContext(PlayerContext);\n    const videoSlug = createVideoSlug(theme, entry, video);\n\n    return (\n        <ButtonPlay to={`/anime/${anime.slug}/${videoSlug}`} playing={currentVideo && currentVideo.filename === video.filename} {...props}>\n            <VideoTags video={video}/>\n        </ButtonPlay>\n    );\n}\n"],"sourceRoot":""}