{"version":3,"sources":["webpack:///./src/components/card/index.js","webpack:///./src/components/text/index.js","webpack:///./src/templates/series.js","webpack:///./src/components/container/sidebar.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/hooks/useImage.js"],"names":["StyledCard","styled","div","props","theme","colors","secondaryTitle","primaryBackground","elevation","hoverable","css","Card","children","StyledText","StyledTextBase","small","Text","StyledSeriesPage","gapsColumn","StyledCoverContainer","StyledCoverContainerFlex","StyledCoverItemContainer","StyledCover","img","SeriesDetailPage","series","data","images","useImage","anime","map","largeCover","filter","image","sidebar","src","title","name","variant","slug","query","StyledContainerSidebar","StyledSidebar","StyledBody","ContainerSidebar","StyledSearchResultCard","StyledChildren","SearchResultCard","description","to","alt","bold","maxLines","link","SearchResultDescription","child","index","length","color","primaryMediumEmphasis","AnimeSearchResultCard","hideThemes","smallCover","animeLink","premiere","year","premiereLink","season","toLowerCase","themes","flexWrap","gapsBoth","slice","entries","videos","entry","video","videoSlug","createVideoSlug","block","icon","faEllipsisH","fixedWidth","StyledButtonPlay","Button","StyledPrefix","secondaryBackground","ButtonPlay","playing","faCircleNotch","faPlay","spin","resourceWithImages","facet"],"mappings":"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","file":"component---src-templates-series-js-8017ef6cd4692e27ad07.js","sourcesContent":["import React from \"react\";\nimport styled, {css} from \"styled-components\";\n\nconst StyledCard = styled.div`\n    padding: 1rem 1.5rem;\n    border-left: 4px solid ${(props) => props.theme.colors.secondaryTitle};\n    border-radius: 0 0.5rem 0.5rem 0;\n\n    background-color: ${(props) => props.theme.colors.primaryBackground[props.theme.elevation]};\n\n    ${(props) => props.hoverable && css`\n        cursor: pointer;\n\n        &:hover {\n            background-color: ${(props) => props.theme.colors.primaryBackground[props.theme.elevation + 1]};\n        }\n    `}\n`;\n\nexport default function Card({ children, ...props }) {\n    return (\n        <StyledCard {...props}>\n            {children}\n        </StyledCard>\n    )\n}\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport {StyledTextBase} from \"components/text/style\";\nimport PropTypes from \"prop-types\";\n\nconst StyledText = styled(StyledTextBase)`\n    ${(props) => props.small && css`\n        font-size: 0.8rem;\n        font-weight: bold;\n    `}\n`;\n\nexport default function Text({ children, ...props }) {\n    return (\n        <StyledText {...props}>\n            {children}\n        </StyledText>\n    );\n}\n\nText.propTypes = {\n    ...StyledText.propTypes,\n    small: PropTypes.bool\n};\n","import Title from \"components/text/title\";\nimport React from \"react\";\nimport ContainerSidebar from \"components/container/sidebar\";\nimport styled from \"styled-components\";\nimport { gapsColumn } from \"styles/mixins\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport SEO from \"components/seo\";\nimport { graphql } from \"gatsby\";\nimport useImage from \"hooks/useImage\";\nimport { Box } from \"components/flex\";\n\nconst StyledSeriesPage = styled.div`\n    ${gapsColumn(\"1.5rem\")}\n`;\nconst StyledCoverContainer = styled.div`        \n    position: relative;\n    width: 100%;\n    padding-top: 150%;\n`;\nconst StyledCoverContainerFlex = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n`;\nconst StyledCoverItemContainer = styled.div`\n    flex: 1;\n    width: 100%;\n    height: 100%;\n`;\nconst StyledCover = styled.img`\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n`;\n\nexport default function SeriesDetailPage({ data: { series } }) {\n    const images = [\n        useImage(series.anime[0]),\n        useImage(series.anime[1]),\n        useImage(series.anime[2]),\n        useImage(series.anime[3])\n    ].map((images) => images.largeCover).filter((image) => !!image);\n\n    const sidebar = (\n        <Box gapsColumn=\"1.5rem\">\n            <StyledCoverContainer>\n                <StyledCoverContainerFlex>\n                    {images.map((image) => (\n                        <StyledCoverItemContainer key={image}>\n                            <StyledCover src={image}/>\n                        </StyledCoverItemContainer>\n                    ))}\n                </StyledCoverContainerFlex>\n            </StyledCoverContainer>\n        </Box>\n    );\n\n    return (\n        <StyledSeriesPage>\n            <SEO title={series.name} />\n            <Title>{series.name}</Title>\n            <ContainerSidebar sidebar={sidebar}>\n                <Box gapsColumn=\"1rem\">\n                    <Title variant=\"section\">Anime</Title>\n                    {series.anime.map((anime) => (\n                        <AnimeSearchResultCard key={anime.slug} anime={anime}/>\n                    ))}\n                </Box>\n            </ContainerSidebar>\n        </StyledSeriesPage>\n    );\n}\n\nexport const query = graphql`\n    query($slug: String!) {\n        series(slug: { eq: $slug }) {\n            slug\n            name\n            anime {\n                slug\n                name\n                themes {\n                    slug\n                    ...VideoSlug\n                }\n                resources {\n                    link\n                    site\n                }\n                images {\n                    facet\n                    link\n                }\n            }\n        }\n    }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledContainerSidebar = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    @media (max-width: 720px) {\n        flex-direction: column;\n    }\n`;\nconst StyledSidebar = styled.div`\n    flex: 1;\n\n    @media (min-width: 721px) {\n        margin-right: 2rem;\n    }\n    @media (max-width: 720px) {\n        margin-bottom: 1.5rem;\n    }\n`;\nconst StyledBody = styled.div`\n    flex: 3;\n`;\n\nexport default function ContainerSidebar({ sidebar, children, ...props }) {\n    return (\n        <StyledContainerSidebar {...props}>\n            <StyledSidebar>\n                {sidebar}\n            </StyledSidebar>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledContainerSidebar>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\nimport {gapsColumn} from \"styles/mixins\";\nimport theme from \"theme\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  \n    ${gapsColumn(\"0.25rem\")}  \n  \n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    return (\n        <StyledSearchResultCard {...props}>\n            <Link to={to}>\n                <StyledCover alt=\"Cover\" src={image}/>\n            </Link>\n            <StyledBody>\n                <Text bold maxLines={2}>\n                    {typeof title === \"string\" ? (\n                        <Link to={to}>\n                            <Text link>{title}</Text>\n                        </Link>\n                    ) : title}\n                </Text>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n}\n\nexport function SearchResultDescription({ children }) {\n    return children.filter((child) => !!child).map((child, index, { length }) => (\n        <Text key={index} color={theme.colors.primaryMediumEmphasis}>\n            <span>{child}</span>\n            {index < length - 1 && (\n                <span color={theme.colors.primaryMediumEmphasis}> &bull; </span>\n            )}\n        </Text>\n    ));\n}\n","import {Link} from \"gatsby\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Text from \"components/text\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\nimport useImage from \"hooks/useImage\";\nimport createVideoSlug from \"utils/createVideoSlug\";\nimport { Flex } from \"components/flex\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { smallCover } = useImage(anime);\n\n    const animeLink = `/anime/${anime.slug}`;\n\n    let premiere = anime.year;\n    let premiereLink = `/year/${anime.year}`;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n        premiereLink += `/${anime.season.toLowerCase()}`;\n    }\n\n    let description = (\n        <SearchResultDescription>\n            <span>Anime</span>\n            {!!premiere && (\n                <Link to={premiereLink}>\n                    <Text link>{premiere}</Text>\n                </Link>\n            )}\n            <span>{anime.themes.length} themes</span>\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={description}\n            image={smallCover}\n            to={animeLink}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex flexWrap=\"wrap\" gapsBoth=\"0.75rem\">\n                        {anime.themes\n                            .slice(0, 4)\n                            .filter((theme) => theme.entries.length && theme.entries[0].videos.length)\n                            .map((theme) => {\n                                const entry = theme.entries[0];\n                                const video = entry.videos[0];\n                                const videoSlug = createVideoSlug(theme, entry, video);\n\n                                return (\n                                    <ButtonPlay key={theme.slug} to={`/anime/${anime.slug}/${videoSlug}`}>\n                                        <Text small block>{theme.slug}</Text>\n                                    </ButtonPlay>\n                                );\n                            })\n                        }\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\" to={animeLink}>\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleNotch, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, playing, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={playing ? faCircleNotch : faPlay} spin={playing} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","export default function useImage(resourceWithImages) {\n    const images = {};\n\n    if (resourceWithImages) {\n        for (const image of resourceWithImages.images) {\n            switch (image.facet) {\n                case \"Small Cover\":\n                    images.smallCover = image.link;\n                    break;\n                case \"Large Cover\":\n                    images.largeCover = image.link;\n                    break;\n                default:\n                // Ignore\n            }\n        }\n    }\n\n    return images;\n}\n"],"sourceRoot":""}