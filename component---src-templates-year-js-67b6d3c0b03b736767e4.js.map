{"version":3,"sources":["webpack:///./src/components/switcher/index.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/templates/year.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/components/navigation/season.js","webpack:///./src/components/navigation/year.js"],"names":["StyledSwitcher","styled","div","elevatedPrimaryBackground","gapsRow","Switcher","children","props","StyledSearchResultCard","Card","StyledCover","img","StyledBody","gapsColumn","StyledChildren","StyledLink","Link","SearchResultCard","title","description","image","to","card","alt","src","bold","color","theme","colors","secondaryTitle","maxLines","small","SearchResultDescription","filter","child","map","index","length","primaryMediumEmphasis","seasonOrder","StyledPage","YearDetailPage","allAnime","data","pageContext","year","seasonList","pageTitle","animeBySeason","groupedBySeason","sort","a","b","indexOf","fieldValue","season","animeList","nodes","SeasonPreview","variant","anime","slug","row","justifyContent","toLowerCase","icon","faChevronDown","fixedWidth","query","AnimeSearchResultCard","hideThemes","useAniList","premiere","premiereLink","link","themes","name","wrap","gapsBoth","slice","entries","videos","filename","block","id","faEllipsisH","StyledButtonPlay","Button","StyledPrefix","secondaryBackground","primaryBackground","ButtonPlay","playing","faCircleNotch","faPlay","spin","SeasonNavigation","availableSeason","active","StyledYear","StyledYearPrevious","StyledYearNext","YearNavigation","yearList","useStaticQuery","groupedByYear","group","previousYear","nextYear","alignItems","silent"],"mappings":"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","file":"component---src-templates-year-js-67b6d3c0b03b736767e4.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport elevatedPrimaryBackground from \"styles/helper\";\nimport {gapsRow} from \"styles/mixins\";\n\nconst StyledSwitcher = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    background-color: ${elevatedPrimaryBackground};\n\n    border-radius: 1rem;\n\n    ${gapsRow(\"0.5rem\")}\n`;\n\nexport default function Switcher({ children, ...props }) {\n    return (\n        <StyledSwitcher {...props}>\n            {children}\n        </StyledSwitcher>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\nimport {gapsColumn} from \"styles/mixins\";\nimport theme from \"theme\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  \n    ${gapsColumn(\"0.25rem\")}  \n  \n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\nconst StyledLink = styled(Link)`\n    display: block;\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    const card = (\n        <StyledSearchResultCard {...props}>\n            <StyledCover alt=\"Cover\" src={image}/>\n            <StyledBody>\n                <Text bold color={theme.colors.secondaryTitle} maxLines={2}>{title}</Text>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n\n    if (to) {\n        return (\n            <StyledLink to={to}>\n                {card}\n            </StyledLink>\n        );\n    }\n\n    return card;\n}\n\nexport function SearchResultDescription({ children }) {\n    return children.filter((child) => !!child).map((child, index, { length }) => (\n        <Text color={theme.colors.primaryMediumEmphasis}>\n            <span>{child}</span>\n            {index < length - 1 && (\n                <span color={theme.colors.primaryMediumEmphasis}> &bull; </span>\n            )}\n        </Text>\n    ));\n}\n","import React from \"react\";\nimport {graphql} from \"gatsby\";\nimport styled from \"styled-components\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport Title from \"components/text/title\";\nimport {gapsColumn} from \"styles/mixins\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport SEO from \"components/seo\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\nimport YearNavigation from \"components/navigation/year\";\nimport SeasonNavigation from \"components/navigation/season\";\n\nconst seasonOrder = [ \"Winter\", \"Spring\", \"Summer\", \"Fall\" ];\nconst StyledPage = styled.div`\n    ${gapsColumn()}\n`;\n\nexport default function YearDetailPage({ data: { allAnime }, pageContext: { year, seasonList } }) {\n    const pageTitle = `${year} Anime`;\n    const animeBySeason = allAnime.groupedBySeason.sort((a, b) => seasonOrder.indexOf(a.fieldValue) - seasonOrder.indexOf(b.fieldValue));\n\n    return (\n        <StyledPage>\n            <SEO title={pageTitle} />\n            <YearNavigation year={year} />\n            <SeasonNavigation year={year} seasonList={seasonList} />\n            {animeBySeason.map(({ fieldValue: season, nodes: animeList }) => (\n                <SeasonPreview key={season} season={season} year={year} animeList={animeList}/>\n            ))}\n        </StyledPage>\n    );\n}\n\nfunction SeasonPreview({ season, year, animeList }) {\n    return (\n        <>\n            <Title variant=\"section\">{season}</Title>\n            {animeList.map((anime) => (\n                <AnimeSearchResultCard key={anime.slug} anime={anime}/>\n            ))}\n            <Flex row justifyContent=\"center\">\n                <Button to={`/year/${year}/${season.toLowerCase()}`} icon>\n                    <FontAwesomeIcon icon={faChevronDown} fixedWidth/>\n                </Button>\n            </Flex>\n        </>\n    );\n}\n\nexport const query = graphql`\n    query($year: Int!) {\n        allAnime(filter: { year: { eq: $year } }) {\n            groupedBySeason: group(field: season, limit: 3) {\n                fieldValue\n                nodes {\n                    slug\n                    name\n                    themes {\n                        slug\n                        entries {\n                            videos {\n                                filename\n                            }\n                        }\n                    }\n                    resources {\n                        link\n                        site\n                    }\n                }\n            }\n        }\n    }\n`;\n","import {Link} from \"gatsby\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { image } = useAniList(anime);\n\n    let premiere = anime.year;\n    let premiereLink = `/year/${anime.year}`;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n        premiereLink += `/${anime.season.toLowerCase()}`;\n    }\n\n    let description = (\n        <SearchResultDescription>\n            <span>Anime</span>\n            {!!premiere && (\n                <Link to={premiereLink}>\n                    <Text link>{premiere}</Text>\n                </Link>\n            )}\n            <span>{anime.themes.length} themes</span>\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={description}\n            image={image}\n            to={`/anime/${anime.slug}`}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex row wrap gapsBoth=\"0.75rem\">\n                        {anime.themes.slice(0, 4).filter((theme) => {\n                            return theme.entries.length && theme.entries[0].videos.length;\n                        }).map((theme) => (\n                            <ButtonPlay key={theme.id} to={`/video/${theme.entries[0].videos[0].filename}`}>\n                                <Text small block>{theme.slug}</Text>\n                            </ButtonPlay>\n                        ))}\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\">\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleNotch, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, playing, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={playing ? faCircleNotch : faPlay} spin={playing} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","import Flex from \"components/flex\";\nimport Switcher from \"components/switcher\";\nimport Button from \"components/button\";\nimport React from \"react\";\n\nexport default function SeasonNavigation({ year, season, seasonList }) {\n    return (\n        <Flex row justifyContent=\"center\">\n            <Switcher>\n                {seasonList.map((availableSeason) => (\n                    <Button key={availableSeason} to={`/year/${year}/${availableSeason.toLowerCase()}`} active={availableSeason === season}>{availableSeason}</Button>\n                ))}\n            </Switcher>\n        </Flex>\n    );\n}\n","import {graphql, Link, useStaticQuery} from \"gatsby\";\nimport Button from \"components/button\";\nimport Title from \"components/text/title\";\nimport styled from \"styled-components\";\nimport Flex from \"components/flex\";\n\nconst StyledYear = styled.div`\n    flex: 1;\n\n    display: flex;\n\n    margin: 0 1rem;\n`;\nconst StyledYearPrevious = styled(StyledYear)`\n    justify-content: flex-end;\n`;\nconst StyledYearNext = styled(StyledYear)`\n    justify-content: flex-start;\n`;\n\nexport default function YearNavigation({ year }) {\n    const yearList = useStaticQuery(graphql`\n        query {\n            allAnime {\n                groupedByYear: group(field: year) {\n                    year: fieldValue\n                }\n            }\n        }\n    `).allAnime.groupedByYear.map((group) => +group.year);\n\n    const previousYear = yearList.indexOf(year) > 0 ? yearList[yearList.indexOf(year) - 1] : null;\n    const nextYear = yearList.indexOf(year) < yearList.length - 1 ? yearList[yearList.indexOf(year) + 1] : null;\n\n    return (\n        <Flex row alignItems=\"center\">\n            <StyledYearPrevious>\n                {previousYear && (\n                    <Link to={`/year/${previousYear}`}>\n                        <Button silent>{previousYear}</Button>\n                    </Link>\n                )}\n            </StyledYearPrevious>\n            <Button to=\"/year\" silent>\n                <Title>{year}</Title>\n            </Button>\n            <StyledYearNext>\n                {nextYear && (\n                    <Link to={`/year/${nextYear}`}>\n                        <Button silent>{nextYear}</Button>\n                    </Link>\n                )}\n            </StyledYearNext>\n        </Flex>\n    );\n}\n"],"sourceRoot":""}