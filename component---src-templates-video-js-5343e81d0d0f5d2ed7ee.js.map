{"version":3,"sources":["webpack:///./src/components/tag/index.js","webpack:///./src/components/card/searchResult/index.js","webpack:///./src/components/utils/themeEntryTags.js","webpack:///./src/components/utils/videoTags.js","webpack:///./src/components/card/searchResult/anime.js","webpack:///./src/components/button/play.js","webpack:///./src/components/card/searchResult/artist.js","webpack:///./src/components/utils/songTitleWithArtists.js","webpack:///./src/templates/video.js","webpack:///./src/components/button/video.js","webpack:///./src/hooks/useAniListArtist.js"],"names":["StyledTag","styled","span","gapsRow","StyledTagIcon","FontAwesomeIcon","props","theme","colors","primaryLowEmphasis","warning","css","warningTitle","Tag","icon","iconProps","children","fixedWidth","small","color","primaryHighEmphasis","StyledSearchResultCard","Card","StyledCover","img","StyledBody","div","gapsColumn","StyledChildren","SearchResultCard","title","description","image","to","card","alt","src","bold","secondaryTitle","maxLines","SearchResultDescription","filter","child","map","index","length","primaryMediumEmphasis","ThemeEntryTags","entry","row","wrap","gapsBoth","faFilm","episodes","spoiler","faBomb","nsfw","faExclamationTriangle","VideoTags","video","resolution","nc","faNotEqual","subbed","faClosedCaptioning","lyrics","faComment","uncen","faEye","source","faCompactDisc","toUpperCase","overlap","faStream","AnimeSearchResultCard","anime","hideThemes","useAniList","premiere","year","premiereLink","season","toLowerCase","link","themes","name","slug","slice","entries","videos","filename","block","id","faEllipsisH","StyledButtonPlay","Button","StyledPrefix","secondaryBackground","primaryBackground","ButtonPlay","playing","faCircleNotch","faPlay","spin","ArtistSearchResultCard","artist","useAniListArtist","performances","SongTitleWithArtists","song","performance","as","StyledVideoInfo","Flex","attrs","VideoPage","data","siteName","useSiteMeta","useEffect","navigator","mediaSession","metadata","MediaMetadata","join","undefined","album","artwork","sizes","type","artistStr","version","otherEntries","otherEntry","otherVideo","pageTitle","pageDesc","alignItems","flex","justifyContent","variant","Fragment","query","VideoButton","currentVideo","useContext","PlayerContext","useState","setImage","isCanceled","fetchAniListArtist","then","aniListArtist"],"mappings":"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","file":"component---src-templates-video-js-5343e81d0d0f5d2ed7ee.js","sourcesContent":["import React from \"react\";\nimport styled, {css} from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {gapsRow} from \"styles/mixins\";\nimport Text from \"components/text\";\nimport theme from \"theme\";\n\nconst StyledTag = styled.span`\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n\n    ${gapsRow(\"0.25rem\")}\n`;\nconst StyledTagIcon = styled(FontAwesomeIcon)`\n    color: ${(props) => props.theme.colors.primaryLowEmphasis};\n\n    ${(props) => props.warning && css`\n        color: ${(props) => props.theme.colors.warningTitle};\n    `}\n`;\n\nexport default function Tag({ icon, iconProps, warning, children, ...props }) {\n    return (\n        <StyledTag {...props}>\n            {!!icon && (\n                <StyledTagIcon icon={icon} fixedWidth warning={warning} {...iconProps}/>\n            )}\n            {!!children && (\n                <Text small color={theme.colors.primaryHighEmphasis}>\n                    {children}\n                </Text>\n            )}\n        </StyledTag>\n    );\n}\n","import React from \"react\";\nimport {Link} from \"gatsby\";\nimport Text from \"components/text\";\nimport styled from \"styled-components\";\nimport Card from \"components/card/index\";\nimport {gapsColumn} from \"styles/mixins\";\nimport theme from \"theme\";\n\nconst StyledSearchResultCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    padding: 0 1rem 0 0;\n`;\nconst StyledCover = styled.img`\n    width: 48px;\n    height: 64px;\n    object-fit: cover;\n`;\nconst StyledBody = styled.div`\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  \n    ${gapsColumn(\"0.25rem\")}  \n  \n    padding: 0 1rem;\n`;\nconst StyledChildren = styled.div`\n    @media (max-width: 720px) {\n        display: none;\n    }\n`;\n\nexport default function SearchResultCard({ title, description, image, to, children, ...props }) {\n    const card = (\n        <StyledSearchResultCard {...props}>\n            <StyledCover alt=\"Cover\" src={image}/>\n            <StyledBody>\n                <Text bold color={theme.colors.secondaryTitle} maxLines={2}>{title}</Text>\n                <Text small maxLines={1}>{description}</Text>\n            </StyledBody>\n            <StyledChildren>\n                {children}\n            </StyledChildren>\n        </StyledSearchResultCard>\n    );\n\n    if (to) {\n        return (\n            <Link to={to}>\n                {card}\n            </Link>\n        );\n    }\n\n    return card;\n}\n\nexport function SearchResultDescription({ children }) {\n    return children.filter((child) => !!child).map((child, index, { length }) => (\n        <Text color={theme.colors.primaryMediumEmphasis}>\n            <span>{child}</span>\n            {index < length - 1 && (\n                <span color={theme.colors.primaryMediumEmphasis}> &bull; </span>\n            )}\n        </Text>\n    ));\n}\n","import Tag from \"components/tag\";\nimport {faBomb, faExclamationTriangle, faFilm} from \"@fortawesome/free-solid-svg-icons\";\nimport Flex from \"components/flex\";\nimport React from \"react\";\n\nexport default function ThemeEntryTags({ entry }) {\n    return (\n        <Flex row wrap gapsBoth=\"0.75rem\">\n            <Tag icon={faFilm}>\n                {entry.episodes || \"—\"}\n            </Tag>\n            {!!entry.spoiler && (\n                <Tag icon={faBomb} warning>\n                    SPOILER\n                </Tag>\n            )}\n            {!!entry.nsfw && (\n                <Tag icon={faExclamationTriangle} warning>\n                    NSFW\n                </Tag>\n            )}\n        </Flex>\n    );\n}\n","import {\n    faClosedCaptioning,\n    faComment,\n    faCompactDisc,\n    faEye,\n    faNotEqual,\n    faStream\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Tag from \"components/tag\";\nimport Flex from \"components/flex\";\n\nexport default function VideoTags({ video }) {\n    return (\n        <Flex row wrap gapsBoth=\"0.75rem\">\n            <Tag title=\"Resolution\">\n                {video.resolution}p\n            </Tag>\n\n            {!!video.nc && (\n                <Tag icon={faNotEqual} title=\"No Credits\"/>\n            )}\n\n            {!!video.subbed && (\n                <Tag icon={faClosedCaptioning} title=\"With Subtitles\"/>\n            )}\n\n            {!!video.lyrics && (\n                <Tag icon={faComment} title=\"With Lyrics\"/>\n            )}\n\n            {!!video.uncen && (\n                <Tag icon={faEye} title=\"Uncensored\"/>\n            )}\n\n            {!!video.source && (\n                <Tag icon={faCompactDisc} title=\"Source\">\n                    {video.source.toUpperCase()}\n                </Tag>\n            )}\n\n            {video.overlap !== \"None\" && (\n                <Tag icon={faStream} title=\"Overlap\">\n                    {video.overlap.toUpperCase()}\n                </Tag>\n            )}\n        </Flex>\n    );\n}\n","import {Link} from \"gatsby\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\nimport Flex from \"components/flex\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\nimport Elevator from \"components/elevator\";\nimport ButtonPlay from \"components/button/play\";\n\nexport default function AnimeSearchResultCard({ anime, hideThemes = false }) {\n    const { image } = useAniList(anime);\n\n    let premiere = anime.year;\n    let premiereLink = `/year/${anime.year}`;\n    if (anime.season) {\n        premiere = anime.season + \" \" + premiere;\n        premiereLink += `/${anime.season.toLowerCase()}`;\n    }\n\n    let description = (\n        <SearchResultDescription>\n            <span>Anime</span>\n            {!!premiere && (\n                <Link to={premiereLink}>\n                    <Text link>{premiere}</Text>\n                </Link>\n            )}\n            <span>{anime.themes.length} themes</span>\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={anime.name}\n            description={description}\n            image={image}\n            to={`/anime/${anime.slug}`}\n        >\n            {!hideThemes && (\n                <Elevator>\n                    <Flex row wrap gapsBoth=\"0.75rem\">\n                        {anime.themes.slice(0, 4).filter((theme) => {\n                            return theme.entries.length && theme.entries[0].videos.length;\n                        }).map((theme) => (\n                            <ButtonPlay key={theme.id} to={`/video/${theme.entries[0].videos[0].filename}`}>\n                                <Text small block>{theme.slug}</Text>\n                            </ButtonPlay>\n                        ))}\n                        {anime.themes.length > 4 && (\n                            <Button icon title=\"Show all themes\">\n                                <FontAwesomeIcon icon={faEllipsisH} fixedWidth/>\n                            </Button>\n                        )}\n                    </Flex>\n                </Elevator>\n            )}\n        </SearchResultCard>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircleNotch, faPlay} from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"components/button\";\n\nconst StyledButtonPlay = styled(Button)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    margin-left: 1rem;\n    padding: 0 0.5rem 0 0;\n`;\nconst StyledPrefix = styled.div`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 2rem;\n    height: 2rem;\n    margin-left: -1rem;\n    border-radius: 1rem;\n\n    background-color: ${(props) => props.theme.colors.secondaryBackground};\n    color: ${(props) => props.theme.colors.primaryBackground[0]};\n`;\nconst StyledBody = styled.div`\n    padding: 0.5rem;  \n`;\n\nexport default function ButtonPlay({ children, playing, ...props }) {\n    return (\n        <StyledButtonPlay {...props}>\n            <StyledPrefix>\n                <FontAwesomeIcon icon={playing ? faCircleNotch : faPlay} spin={playing} fixedWidth />\n            </StyledPrefix>\n            <StyledBody>\n                {children}\n            </StyledBody>\n        </StyledButtonPlay>\n    );\n}\n","import React from \"react\";\nimport useAniListArtist from \"hooks/useAniListArtist\";\nimport SearchResultCard, {SearchResultDescription} from \"components/card/searchResult\";\n\nexport default function ArtistSearchResultCard({ artist }) {\n    const { image } = useAniListArtist(artist);\n\n    const description = (\n        <SearchResultDescription>\n            <span>Artist</span>\n            {!!artist.performances && (\n                <span>{artist.performances.length} songs</span>\n            )}\n        </SearchResultDescription>\n    );\n\n    return (\n        <SearchResultCard\n            title={artist.name}\n            description={description}\n            image={image}\n            to={`/artist/${artist.slug}`}\n        />\n    );\n}\n","import Text from \"components/text\";\nimport {Link} from \"gatsby\";\nimport theme from \"theme\";\n\nexport default function SongTitleWithArtists({ song }) {\n    return (\n        <>\n            <Text color={theme.colors.secondaryTitle}>{song.title}</Text>\n            {!!song.performances && !!song.performances.length && (\n                <>\n                    <Text small color={theme.colors.primaryMediumEmphasis}> by </Text>\n                    {song.performances.map((performance, index) => (\n                        <>\n                            <Link to={`/artist/${performance.artist.slug}`}>\n                                <Text key={performance.as || performance.artist.name} link>\n                                    {performance.as || performance.artist.name}\n                                </Text>\n                            </Link>\n                            {index < song.performances.length - 1 && (\n                                <Text small color={theme.colors.primaryMediumEmphasis}>\n                                    {index === song.performances.length - 2 ? \" & \" : \", \"}\n                                </Text>\n                            )}\n                        </>\n                    ))}\n                </>\n            )}\n        </>\n    );\n}\n","import {graphql, Link} from \"gatsby\";\nimport Flex, {FlexItem} from \"components/flex\";\nimport styled from \"styled-components\";\nimport Text from \"components/text\";\nimport useAniList from \"hooks/useAniList\";\nimport useSiteMeta from \"hooks/useSiteMeta\";\nimport SongTitleWithArtists from \"components/utils/songTitleWithArtists\";\nimport VideoTags from \"components/utils/videoTags\";\nimport ThemeEntryTags from \"components/utils/themeEntryTags\";\nimport React, {useEffect} from \"react\";\nimport Title from \"components/text/title\";\nimport VideoButton from \"components/button/video\";\nimport AnimeSearchResultCard from \"components/card/searchResult/anime\";\nimport ArtistSearchResultCard from \"components/card/searchResult/artist\";\nimport SEO from \"components/seo\";\n\nconst StyledVideoInfo = styled(Flex).attrs({\n    gapsColumn: \"2rem\"\n})`\n    padding: 0 1rem;\n`;\n\nexport default function VideoPage({ data: { video } }) {\n    const entry = video.entries[0]; // TODO: What about the other entries?\n    const theme = entry.theme;\n    const anime = theme.anime;\n\n    const { siteName } = useSiteMeta();\n    const { image } = useAniList(anime);\n\n    useEffect(() => {\n        if (theme && image) {\n            // eslint-disable-next-line no-undef\n            navigator.mediaSession.metadata = new MediaMetadata({\n                title: `${theme.slug} • ${theme.song.title}`,\n                artist: theme.song.performances ? theme.song.performances.map((performance) => performance.as || performance.artist.name).join(\", \") : undefined,\n                album: anime.name,\n                artwork: [\n                    { src: image, sizes: \"512x512\", type: \"image/jpeg\" }\n                ]\n            });\n        }\n    }, [ anime, theme, image ]);\n\n    const otherEntries = theme.entries.map(otherEntry => {\n        const videos = otherEntry.videos.filter((otherVideo) => otherVideo.filename !== video.filename);\n\n        if (!videos.length) {\n            return null;\n        }\n\n        return {\n            ...otherEntry,\n            videos\n        };\n    }).filter((otherEntry) => !!otherEntry);\n\n    // Generates and returns page title\n    const pageTitle = entry.version\n        ? `${theme.song.title} (${anime.name} ${theme.slug} V${entry.version})`\n        : `${theme.song.title} (${anime.name} ${theme.slug})`;\n\n    const pageDesc = (() => {\n        // Generates and returns page description for SEO\n        let song = theme.song,\n            artistStr = \"\",\n            version = entry.version ? ` Version ${entry.version}` : \"\";\n        if (song.performances && song.performances.length) {\n            artistStr = \" by \";\n            song.performances.map((performance, index) => {\n                artistStr += performance.as || performance.artist.name;\n                if (index < song.performances.length - 1) {\n                    artistStr += (index === song.performances.length - 2 ? \", and \" : \", \");\n                }\n            });\n        }\n        return `Watch ${anime.name} ${theme.slug}${version}: ${song.title}${artistStr} on ${siteName}`;\n    })();\n\n    return (\n        <StyledVideoInfo>\n            <SEO title={pageTitle} description={pageDesc} />\n            <Flex row alignItems=\"center\" gapsRow=\"1rem\">\n                <FlexItem flex={1}>\n                    <Flex justifyContent=\"center\" gapsColumn=\"0.25rem\">\n                        <Text bold>\n                            <SongTitleWithArtists song={theme.song}/>\n                        </Text>\n                        <Text small maxLines={1}>\n                            <Text>{theme.slug} from </Text>\n                            <Link to={`/anime/${anime.slug}`}>\n                                <Text link>{anime.name}</Text>\n                            </Link>\n                        </Text>\n                    </Flex>\n                </FlexItem>\n                <Flex row alignItems=\"center\" gapsRow=\"0.5rem\">\n                    <Text small>Version {entry.version || 1}</Text>\n                    <ThemeEntryTags entry={entry}/>\n                    <Text link>&bull;</Text>\n                    <VideoTags video={video}/>\n                </Flex>\n            </Flex>\n            <Flex row gapsRow=\"2rem\">\n                <FlexItem flex={2}>\n                    <Flex gapsColumn=\"1rem\">\n                        <Title variant=\"section\">Related entries</Title>\n                        <Flex row gapsRow=\"1rem\">\n                            <FlexItem flex={1}>\n                                <AnimeSearchResultCard anime={anime} hideThemes/>\n                            </FlexItem>\n                            <FlexItem flex={1}>\n                                <Flex gapsColumn=\"1rem\">\n                                    {!!theme.song.performances && theme.song.performances.map((performance) => (\n                                        <ArtistSearchResultCard key={performance.artist.name} artist={performance.artist}/>\n                                    ))}\n                                </Flex>\n                            </FlexItem>\n                        </Flex>\n                    </Flex>\n                </FlexItem>\n                <FlexItem flex={1}>\n                    {!!otherEntries.length && (\n                        <Flex gapsColumn=\"1rem\" alignItems=\"flex-end\">\n                            <Title variant=\"section\">Other versions</Title>\n                            {otherEntries.map((otherEntry) => (\n                                <React.Fragment key={otherEntry.version}>\n                                    <Flex row alignItems=\"center\" gapsRow=\"0.5rem\">\n                                        <Text small>Version {otherEntry.version || 1}</Text>\n                                        <ThemeEntryTags entry={entry}/>\n                                    </Flex>\n                                    {otherEntry.videos.map((video, index) => (\n                                        <VideoButton key={index} video={video}/>\n                                    ))}\n                                </React.Fragment>\n                            ))}\n                        </Flex>\n                    )}\n                </FlexItem>\n            </Flex>\n        </StyledVideoInfo>\n    );\n}\n\nexport const query = graphql`\n    query($filename: String!) {\n        video(filename: { eq: $filename }) {\n            filename\n            link\n            lyrics\n            nc\n            overlap\n            resolution\n            source\n            subbed\n            uncen\n            entries {\n                episodes\n                nsfw\n                spoiler\n                version\n                theme {\n                    slug\n                    anime {\n                        name\n                        slug\n                        year\n                        season\n                        themes {\n                            slug\n                        }\n                        resources {\n                            site\n                            link\n                        }\n                    }\n                    song {\n                        title\n                        performances {\n                            artist {\n                                name\n                                slug\n                            }\n                            as\n                        }\n                    }\n                    entries {\n                        episodes\n                        nsfw\n                        spoiler\n                        version\n                        videos {\n                            filename\n                            lyrics\n                            nc\n                            overlap\n                            resolution\n                            source\n                            subbed\n                            uncen\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n","import ButtonPlay from \"components/button/play\";\nimport VideoTags from \"components/utils/videoTags\";\nimport {useContext} from \"react\";\nimport PlayerContext from \"context/playerContext\";\n\nexport default function VideoButton({ video, ...props }) {\n    const { currentVideo } = useContext(PlayerContext);\n\n    return (\n        <ButtonPlay to={`/video/${video.filename}`} playing={currentVideo && currentVideo.filename === video.filename} {...props}>\n            <VideoTags video={video}/>\n        </ButtonPlay>\n    );\n}\n","import {fetchAniListArtist} from \"api/aniList\";\nimport {useEffect, useState} from \"react\";\n\nexport default function useAniList(artist) {\n    const [image, setImage] = useState(null);\n\n    useEffect(() => {\n        let isCanceled = false;\n\n        fetchAniListArtist(artist.name)\n            .then(aniListArtist => {\n                if (!isCanceled) {\n                    setImage(aniListArtist.image);\n                }\n            });\n\n        return () => { isCanceled = true };\n    }, [artist]);\n\n    return { image };\n}\n"],"sourceRoot":""}